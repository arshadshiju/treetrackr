​​import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.border.TitledBorder;


import com.toedter.calendar.JDateChooser;
import java.util.Date;
import java.sql.*; 
import java.util.logging.Level; 
import java.util.logging.Logger; 
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.TableCellRenderer;
import java.util.HashMap;
import java.util.Map;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.util.Vector;
import javax.swing.table.TableColumn;






public class RainforestRestorationLogin{  // Main public class for Rainforest Restoration Login
  private JFrame frame;
   private JTextField usernameField;
   private JPasswordField passwordField;
   private JComboBox<String> userTypeComboBox;
   private JButton showPasswordButton;
   private boolean isPasswordVisible = false;
   private DefaultTableModel plantTableModel;
   private DefaultTableModel studentTableModel;
    private JTable studentTable;
   private JTable plantTable;




   private List<String[]> users;
   private boolean isAlphabeticalOrder = false;
   private List<Object[]> originalOrder;




   private static final String DB_URL = "jdbc:mysql://localhost:3306/rainforest?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";
   private static final String USER = "root";
   private static final String PASS = "0130742a";




   private JFrame nurseryFrame;
 


   // Declaring fields as class members
   private JTextField quantityField, plantHeightField, plantWidthField, plantSpeciesField;
   private JComboBox<String> soilMoistureField, sunlightExposureField, plantStatusField, plantStageField, plantTypeField;
   private JDateChooser lastFertilisedField;
 




   private JTable homeNurseryTable;
   private JTable treeTrackrNurseryTable;
   private JPanel homePanel; 


   // Adding a field to track the current user's role
   private String currentUserRole;


  




   public RainforestRestorationLogin() {
       initializeUsers();
       createGUI();
       plantSpeciesField = new JTextField();
       this.homePanel = new JPanel(); // Initializing homePanel
       initializeNurseryTables();
   }








   private void initializeUsers() {
       users = new ArrayList<>();




       try {
           Class.forName("com.mysql.cj.jdbc.Driver");
           Connection dbConnect = DriverManager.getConnection(DB_URL, USER, PASS);
          
           // Retrieving admin credentials
           String adminSQL = "SELECT UsernameID, Password FROM admin";
           Statement adminSt = dbConnect.createStatement();
           ResultSet adminResult = adminSt.executeQuery(adminSQL);




           if (adminResult.next()) {
               String adminUsername = adminResult.getString("UsernameID");
               String adminPassword = adminResult.getString("Password");
               users.add(new String[]{"Admin", adminUsername, adminPassword, "Administrator"});
           }
           adminSt.close();




           // Retrieving student credentials
           String studentSQL = "SELECT UsernameID, Password FROM student";
           Statement studentSt = dbConnect.createStatement();
           ResultSet studentResult = studentSt.executeQuery(studentSQL);




           int studentCount = 1;
           while (studentResult.next()) {
               String studentUsername = studentResult.getString("UsernameID");
               String studentPassword = studentResult.getString("Password");
               users.add(new String[]{"Student" + studentCount++, studentUsername, studentPassword, "Student"});
           }
           studentSt.close();




           dbConnect.close();
       } catch (ClassNotFoundException | SQLException ex) {
           Logger.getLogger(RainforestRestorationLogin.class.getName()).log(Level.SEVERE, null, ex);
           System.out.println("Error connecting to database: " + ex.getMessage());
           // Fallback to default credentials if database connection fails
           users.add(new String[]{"Admin", "admin", "password", "Administrator"});
           users.add(new String[]{"Student1", "student1", "password1", "Student"});
           users.add(new String[]{"Student2", "student2", "password2", "Student"});
       }
   }


   private void initializeNurseryTables() {
       // Initializing home nursery table
       homeNurseryTable = new JTable(/* inserting table model */);
       JScrollPane homeScrollPane = new JScrollPane(homeNurseryTable);
      
      
      
       // Creating panel for home nursery table
       JPanel homeNurseryPanel = new JPanel(new BorderLayout());
       homeNurseryPanel.add(homeScrollPane, BorderLayout.CENTER);
      
       JPanel homeButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
      
       homeNurseryPanel.add(homeButtonPanel, BorderLayout.NORTH);
      
       // Adding homeNurseryPanel to my main panel or frame
       if (this.homePanel != null) {
           this.homePanel.add(homeNurseryPanel);
       } else {
           System.err.println("Error: homePanel is null");
       }
      
       // Initialising TreeTrackr nursery table
       treeTrackrNurseryTable = new JTable(/* my table model */);
       JScrollPane treeTrackrScrollPane = new JScrollPane(treeTrackrNurseryTable);
      
  
      
       // Creating panel for TreeTrackr nursery table and button
       JPanel treeTrackrNurseryPanel = new JPanel(new BorderLayout());
       treeTrackrNurseryPanel.add(treeTrackrScrollPane, BorderLayout.CENTER);
      
       JPanel treeTrackrButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
  
       treeTrackrNurseryPanel.add(treeTrackrButtonPanel, BorderLayout.NORTH);
      
      
       // Adding treeTrackrNurseryPanel 
       JPanel nurseryTablesPanel = new JPanel();
       nurseryTablesPanel.add(treeTrackrNurseryPanel);
       this.homePanel.add(nurseryTablesPanel);
   }








   private void createGUI() {
      frame = new JFrame("Tree Trackr. Homepage");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.setLayout(new BorderLayout());
      frame.getContentPane().setBackground(new Color(220, 240, 220)); // Setting the dark green background








       JPanel mainPanel = new JPanel();
       mainPanel.setBackground(new Color(220, 240, 220));
       mainPanel.setLayout(null); // Using null layout for custom positioning








       // Defining Title Label as the label of the JPanel
       JLabel titleLabel = new JLabel("<html><center><b>TreeTrackr. </b></center></html>", SwingConstants.CENTER);
       titleLabel.setFont(new Font("Arial", Font.BOLD, 28));
       titleLabel.setBounds(20, 10, 760, 50);
       mainPanel.add(titleLabel);








       // Adding the logo to the top left
       ImageIcon logoIcon = new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Rainforest Logo.png"); 
       Image logoImage = logoIcon.getImage().getScaledInstance(180, 120, Image.SCALE_SMOOTH); // Increasing width and adjusting the height for the image
       JLabel logoLabel = new JLabel(new ImageIcon(logoImage));
       logoLabel.setBounds(570, 40, 180, 120); 
       mainPanel.add(logoLabel);








       // Adding informational text to the right side
       JLabel infoLabel = new JLabel("<html><div style='text-align: right;'>"
           + "<b>About the Nursery</b><br>"
           + "Our campus rainforest nursery hosts nearly a thousand endangered and native rainforest species, enhancing local biodiversity of flora and fauna.</div></html>");
       infoLabel.setFont(new Font("Arial", Font.PLAIN, 16)); 
       infoLabel.setBounds(500, 140, 250, 200); 
       mainPanel.add(infoLabel);








       // Adding the image at the center-left
       ImageIcon imageIcon = new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Rainforest Background Info.png"); // Replacing with my image path
       Image image = imageIcon.getImage().getScaledInstance(480, 250, Image.SCALE_SMOOTH);
       JLabel imageLabel = new JLabel(new ImageIcon(image));
       imageLabel.setBounds(20, 60, 480, 250); // Adjusting the positioning
       mainPanel.add(imageLabel);








       // Adding the live data representation/graph below the image
       JPanel graphPanel = createGraphPanel();
       graphPanel.setBounds(20, 320, 480, 170);
       graphPanel.setBorder(BorderFactory.createLineBorder(new Color(0, 100, 0), 2));
       mainPanel.add(graphPanel);








       // Adding the login to the bottom-right
       JPanel loginPanel = new JPanel();
       loginPanel.setLayout(new GridLayout(5, 2, 10, 10));
       loginPanel.setBackground(new Color(220, 240, 220));
       loginPanel.setBounds(500, 320, 280, 180); 








       // Adding user type combo box
       userTypeComboBox = new JComboBox<>(new String[]{"Student", "Administrator"});
       userTypeComboBox.setFont(new Font("Arial", Font.PLAIN, 16)); 
       userTypeComboBox.setPreferredSize(new Dimension(200, 30)); 
       loginPanel.add(new JLabel("User Type:", SwingConstants.RIGHT)).setFont(new Font("Arial", Font.PLAIN, 16)); 
       loginPanel.add(userTypeComboBox);








       // Adding username field
       usernameField = new JTextField(10);
       usernameField.setFont(new Font("Arial", Font.PLAIN, 16));
       usernameField.setPreferredSize(new Dimension(200, 30));
       loginPanel.add(new JLabel("Username:", SwingConstants.RIGHT)).setFont(new Font("Arial", Font.PLAIN, 16)); 
       loginPanel.add(usernameField);








       // Adding password field with eye icon
       passwordField = new JPasswordField(10);
       passwordField.setFont(new Font("Arial", Font.PLAIN, 16)); // Increased font size
       passwordField.setPreferredSize(new Dimension(170, 30)); // Slightly smaller adjustment to accommodate eye icon
       loginPanel.add(new JLabel("Password:", SwingConstants.RIGHT)).setFont(new Font("Arial", Font.PLAIN, 16)); // Increasing the font size








       JPanel passwordPanel = new JPanel(new BorderLayout());
       passwordPanel.setBackground(new Color(220, 240, 220));








       ImageIcon eyeIcon = new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Eye Icon.png");
       ImageIcon scaledEyeIcon = new ImageIcon(eyeIcon.getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
       // Scaling down the icon to required size 
       showPasswordButton = new JButton(scaledEyeIcon);
       showPasswordButton.setPreferredSize(new Dimension(30, 30));
       showPasswordButton.setContentAreaFilled(false);
       showPasswordButton.setBorderPainted(false);
       showPasswordButton.setFocusPainted(false);
       showPasswordButton.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
               if (isPasswordVisible) {
                   passwordField.setEchoChar('•');
                   showPasswordButton.setIcon(scaledEyeIcon);
                   isPasswordVisible = false;
               } else {
                   passwordField.setEchoChar((char) 0); // Showing the password characters
                   showPasswordButton.setIcon(scaledEyeIcon);
                   isPasswordVisible = true;
               }
           }
       });
       passwordPanel.add(passwordField, BorderLayout.CENTER);
       passwordPanel.add(showPasswordButton, BorderLayout.EAST);
       loginPanel.add(passwordPanel);








       // Adding login button
       JButton loginButton = new JButton("Login");
       loginButton.setFont(new Font("Arial", Font.PLAIN, 16)); // Increased font size
       loginButton.addActionListener(new LoginButtonListener());
       loginPanel.add(new JLabel("")); // Empty label for spacing
       loginPanel.add(loginButton);








       // Adding forgot password button with increased width
       JButton forgotPasswordButton = new JButton("Forgot Password");
       forgotPasswordButton.setFont(new Font("Arial", Font.PLAIN, 12)); 
       forgotPasswordButton.setPreferredSize(new Dimension(200, 30)); 
       forgotPasswordButton.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
               showForgotPasswordDialog();
           }
       });
       loginPanel.add(new JLabel("")); 
       loginPanel.add(forgotPasswordButton);








       mainPanel.add(loginPanel);








      frame.add(mainPanel);
      frame.setSize(800, 600);
     
      // Centering the frame on the screen
      frame.setLocationRelativeTo(null);
     
      frame.setVisible(true);
   }


   private void showForgotPasswordDialog() {
       JPanel panel = new JPanel(new GridLayout(0, 1, 5, 5));
       panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
       panel.setBackground(new Color(0, 100, 0)); 


       // Adding the title and instructions for user
       JLabel titleLabel = new JLabel("<html><b>Password Recovery</b></html>");
       titleLabel.setFont(new Font("Arial", Font.BOLD, 14));
       titleLabel.setForeground(Color.WHITE);
       panel.add(titleLabel);


       JLabel instructionsLabel = new JLabel("<html>Please contact your teacher administrator to input their credentials to retrieve your password.</html>");
       instructionsLabel.setFont(new Font("Arial", Font.PLAIN, 12));
       instructionsLabel.setForeground(Color.WHITE);
       panel.add(instructionsLabel);


       panel.add(new JSeparator()); 


       JTextField usernameField = new JTextField(10);
       JTextField adminUsernameField = new JTextField(10);
       JPasswordField adminPasswordField = new JPasswordField(10);


       panel.add(new JLabel("Student Username:")).setForeground(Color.WHITE);
       panel.add(usernameField);
       panel.add(new JLabel("Admin Username:")).setForeground(Color.WHITE);
       panel.add(adminUsernameField);
       panel.add(new JLabel("Admin Password:")).setForeground(Color.WHITE);
       panel.add(adminPasswordField);


       // Setting custom colors for the JOptionPane
       UIManager.put("OptionPane.background", new Color(0, 100, 0));
       UIManager.put("Panel.background", new Color(0, 100, 0));
       UIManager.put("OptionPane.messageForeground", Color.WHITE);


       int result = JOptionPane.showConfirmDialog(null, panel,
           "Password Recovery", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      
       // Resetting UI Manager defaults
       UIManager.put("OptionPane.background", null);
       UIManager.put("Panel.background", null);
       UIManager.put("OptionPane.messageForeground", null);


       if (result == JOptionPane.OK_OPTION) {
           String studentUsername = usernameField.getText();
           String adminUsername = adminUsernameField.getText();
           String adminPassword = new String(adminPasswordField.getPassword());


           if (validateAdminCredentials(adminUsername, adminPassword)) {
               String studentPassword = retrieveStudentPassword(studentUsername);
               if (studentPassword != null) {
                   // Setting custom colours for success message
                   UIManager.put("OptionPane.background", new Color(0, 100, 0));
                   UIManager.put("Panel.background", new Color(0, 100, 0));
                   UIManager.put("OptionPane.messageForeground", Color.WHITE);
                  
                   JOptionPane.showMessageDialog(null,
                       "<html><font color='white'>The password for " + studentUsername + " is: " + studentPassword + "</font></html>",
                       "Password Retrieved Successfully", JOptionPane.INFORMATION_MESSAGE);
                  
                   // Resetting UI Manager defaults
                   UIManager.put("OptionPane.background", null);
                   UIManager.put("Panel.background", null);
                   UIManager.put("OptionPane.messageForeground", null);
               } else {
                   showErrorMessage("No student found with the username: " + studentUsername, "Student Not Found");
               }
           } else {
               showErrorMessage("Invalid admin credentials: Please try again reinputting your credentials.", "Authentication Failed");
           }
       }
   }


   private void showErrorMessage(String message, String title) {
       // Setting custom colors for error message
       UIManager.put("OptionPane.background", new Color(139, 0, 0)); // Dark red colour for error
       UIManager.put("Panel.background", new Color(139, 0, 0));
       UIManager.put("OptionPane.messageForeground", Color.WHITE);
      
       JOptionPane.showMessageDialog(null,
           "<html><font color='white'>" + message + "</font></html>",
           title, JOptionPane.ERROR_MESSAGE);
      
       // Resetting UI Manager defaults
       UIManager.put("OptionPane.background", null);
       UIManager.put("Panel.background", null);
       UIManager.put("OptionPane.messageForeground", null);
   }


   private boolean validateAdminCredentials(String username, String password) {
       try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM admin WHERE UsernameID = ? AND Password = ?")) {
          
           pstmt.setString(1, username);
           pstmt.setString(2, password);
          
           try (ResultSet rs = pstmt.executeQuery()) {
               return rs.next(); // If there's a result, credentials are valid
           }
       } catch (SQLException ex) {
           ex.printStackTrace();
           return false;
       }
   }


   private String retrieveStudentPassword(String username) {
       try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            PreparedStatement pstmt = conn.prepareStatement("SELECT Password FROM student WHERE UsernameID = ?")) {
          
           pstmt.setString(1, username);
          
           try (ResultSet rs = pstmt.executeQuery()) {
               if (rs.next()) {
                   return rs.getString("Password");
               }
           }
       } catch (SQLException ex) {
           ex.printStackTrace();
       }
       return null;
   }


   private class LoginButtonListener implements ActionListener {
       @Override
       public void actionPerformed(ActionEvent e) {
           String username = usernameField.getText();
           String password = new String(passwordField.getPassword());
           String userType = (String) userTypeComboBox.getSelectedItem();




           if (validateLogin(username, password, userType)) {
               currentUserRole = userType; // Setting the current user's role
               // Customising the success dialog
               UIManager.put("OptionPane.background", new Color(0, 100, 0));
               UIManager.put("Panel.background", new Color(0, 100, 0));
               UIManager.put("OptionPane.messageForeground", Color.WHITE);
              
               JOptionPane.showMessageDialog(
                  frame,
                   "<html><font color='white'>Login successful!</font></html>",
                   "Success",
                   JOptionPane.INFORMATION_MESSAGE
               );
              
               // Resetting UI Manager defaults
               UIManager.put("OptionPane.background", null);
               UIManager.put("Panel.background", null);
               UIManager.put("OptionPane.messageForeground", null);


               frame.dispose(); // Closing the login frame


               if (userType.equals("Administrator")) {
                   showAdminPage(); // Calling to show the admin page
               } else {
                   showNurseryPage(); 
               }
           } else {
               // Customising the error dialog
               UIManager.put("OptionPane.background", new Color(139, 0, 0)); // Dark red
               UIManager.put("Panel.background", new Color(139, 0, 0));
               UIManager.put("OptionPane.messageForeground", Color.WHITE);
              
               JOptionPane.showMessageDialog(
                  frame,
                   "<html><font color='white'>Invalid username or password</font></html>",
                   "Login Error",
                   JOptionPane.ERROR_MESSAGE
               );
              
               // Resetting UI Manager defaults
               UIManager.put("OptionPane.background", null);
               UIManager.put("Panel.background", null);
               UIManager.put("OptionPane.messageForeground", null);
           }
       }
   }




   private boolean validateLogin(String username, String password, String userType) {
       String table = userType.equals("Administrator") ? "admin" : "student";
       String sql = "SELECT * FROM " + table + " WHERE UsernameID = ? AND Password = ?";




       try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            PreparedStatement pstmt = conn.prepareStatement(sql)) {
          
           pstmt.setString(1, username);
           pstmt.setString(2, password);
          
           try (ResultSet rs = pstmt.executeQuery()) {
               return rs.next(); // If there's a result, login is valid
           }
       } catch (SQLException ex) {
           ex.printStackTrace();
           return false;
       }
   }


   private void refreshDeadPlantsData(DefaultTableModel model) {
       model.setRowCount(0); // Clearing existing data
       String SQL = "SELECT RecordID, PlantSpecies, TableNameID, Quantity, PlantStatus FROM PLANT_SPECIES_RECORD WHERE PlantStatus = 'Dead' ORDER BY RecordID";
      
       try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            PreparedStatement pstmt = conn.prepareStatement(SQL);
            ResultSet rs = pstmt.executeQuery()) {
          
           while (rs.next()) {
               model.addRow(new Object[]{
                   rs.getInt("RecordID"),
                   rs.getString("PlantSpecies"),
                   rs.getString("TableNameID"),
                   rs.getInt("Quantity"),
                   rs.getString("PlantStatus")
               });
           }
          
           if (model.getRowCount() == 0) {
               JOptionPane.showMessageDialog(frame, "No dead plants found.", "Information", JOptionPane.INFORMATION_MESSAGE);
           }
       } catch (SQLException ex) {
           ex.printStackTrace();
           JOptionPane.showMessageDialog(frame, "Error refreshing dead plants data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
       }
   }






   private void showAdminPage() {
       if (frame != null) {
           frame.dispose(); // Disposing of any existing frame
       }
       frame = new JFrame("Rainforest Restoration Administration Homepage");
       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


       // Creating a main panel to hold all components
       JPanel mainPanel = new JPanel();
       mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));


       // Creating the admin panel
       JPanel adminPanel = new JPanel();
       adminPanel.setBackground(new Color(220, 240, 220));
       adminPanel.setLayout(null); // Using null layout for the custom positioning
       adminPanel.setPreferredSize(new Dimension(780, 1200)); 


       
       JLabel titleLabel = new JLabel("<html><b>Tree Trackr. Administrator HomePage</b><br><span style='font-family:Times New Roman;font-style:italic;font-size:12px;'>Your guide to navigate and track the Rainforest Nursery!</span></html>");
       titleLabel.setFont(new Font("Arial", Font.PLAIN, 24)); 
       titleLabel.setBounds(20, 10, 600, 50); 
       adminPanel.add(titleLabel);


       // Placing the logo on the top right
       ImageIcon logoIcon = new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Rainforest Logo.png"); // Replacing with my logo path
       Image logoImage = logoIcon.getImage().getScaledInstance(150, 100, Image.SCALE_SMOOTH);
       JLabel logoLabel = new JLabel(new ImageIcon(logoImage));
       logoLabel.setBounds(620, 10, 150, 100);
       adminPanel.add(logoLabel);
      
       // Student List Panel
       JPanel studentListPanel = new JPanel(new BorderLayout());
       TitledBorder studentListBorder = BorderFactory.createTitledBorder(
           BorderFactory.createLineBorder(new Color(0, 100, 0)), // Dark green border
           "Student List",
           TitledBorder.DEFAULT_JUSTIFICATION,
           TitledBorder.DEFAULT_POSITION,
           new Font("Arial", Font.BOLD, 14),
           Color.BLACK // Black text
       );
       studentListPanel.setBorder(studentListBorder);
       studentListPanel.setBounds(20, 120, 360, 400);
       studentListPanel.setFont(new Font("Arial", Font.PLAIN, 16));


       // Retrieving student data and store in 2D array
       String[][] studentData = retrieveStudentData();


       // Creating the table model with column names and data
       studentTableModel = new DefaultTableModel(
           studentData,
           new String[]{"UsernameID", "First Name", "Last Name", "Email"}
       );


       studentTable = new JTable(studentTableModel);
       studentTable.setFont(new Font("Arial", Font.PLAIN, 14));
       studentTable.setRowHeight(24);
       studentTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // Disabling auto-resize to allow horizontal scrolling


       // Setting preferred width for each column
       int[] studentColumnWidths = {100, 100, 100, 150};
       for (int i = 0; i < studentColumnWidths.length; i++) {
           studentTable.getColumnModel().getColumn(i).setPreferredWidth(studentColumnWidths[i]);
       }


       JScrollPane studentScrollPane = new JScrollPane(studentTable);
       studentScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
       studentScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
       studentListPanel.add(studentScrollPane, BorderLayout.CENTER);


      
      


       // Add/Delete Buttons for Student List
       JPanel studentListButtons = new JPanel();
       ImageIcon deleteIcon = new ImageIcon(new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Delete.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
       ImageIcon addIcon = new ImageIcon(new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Add.png").getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH));
       JButton deleteStudentButton = new JButton(deleteIcon);
       deleteStudentButton.addActionListener(e -> deleteRecord(studentTable, studentTableModel));
       JButton addStudentButton = new JButton(addIcon);
       addStudentButton.addActionListener(e -> showAddUserPanel());
       JButton editStudentButton = createEditStudentButton();
       studentListButtons.add(addStudentButton);
       studentListButtons.add(deleteStudentButton);
       studentListButtons.add(editStudentButton);
       studentListPanel.add(studentListButtons, BorderLayout.SOUTH);
       adminPanel.add(studentListPanel);


       // Plant Species Data Panel
       JPanel plantDataPanel = new JPanel(new BorderLayout());
       plantDataPanel.setBounds(400, 120, 360, 400);
       plantDataPanel.setFont(new Font("Arial", Font.PLAIN, 16));


       plantTableModel = createTableModel();
       plantTable = new JTable(plantTableModel); // Initializing plantTable
       plantTable.setFont(new Font("Arial", Font.PLAIN, 14));
       plantTable.setRowHeight(24);
       plantTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);


       int[] plantColumnWidths = {100, 150, 100, 120, 120, 120, 140, 100, 120, 140, 120, 100};
       for (int i = 0; i < Math.min(plantColumnWidths.length, plantTable.getColumnCount()); i++) {
           TableColumn column = plantTable.getColumnModel().getColumn(i);
           column.setPreferredWidth(plantColumnWidths[i]);
       }


       JScrollPane plantScrollPane = new JScrollPane(plantTable);
       plantScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
       plantScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);


       // Setting the title "All About the Rainforest Nursery" in dark green
       TitledBorder plantDataBorder = BorderFactory.createTitledBorder(
           BorderFactory.createLineBorder(new Color(0, 100, 0)),
           "All About the Rainforest Nursery",
           TitledBorder.DEFAULT_JUSTIFICATION,
           TitledBorder.DEFAULT_POSITION,
           new Font("Arial", Font.BOLD, 14),
           Color.BLACK 
       );
       plantScrollPane.setBorder(plantDataBorder);


       plantDataPanel.add(plantScrollPane, BorderLayout.CENTER);


       // Add/Delete/Refresh Buttons for Plant Species Data
       JPanel plantDataButtons = new JPanel();
       JButton deletePlantButton = new JButton(deleteIcon);
       deletePlantButton.addActionListener(e -> deleteSelectedRecord());
       JButton addPlantButton = new JButton(addIcon);
       addPlantButton.addActionListener(e -> showAddPlantDialogFromNurseryPage());
      
       // Creating and add the refresh button
       JButton refreshButton = new JButton("Refresh");
       refreshButton.setBackground(new Color(0, 100, 0)); 
       refreshButton.setForeground(Color.BLACK);
       refreshButton.setFocusPainted(false);
       refreshButton.addActionListener(e -> refreshPlantTable());
      
       plantDataButtons.add(addPlantButton);
       plantDataButtons.add(deletePlantButton);
       plantDataButtons.add(refreshButton); // Adding the refresh button to the panel
       plantDataPanel.add(plantDataButtons, BorderLayout.SOUTH);
       adminPanel.add(plantDataPanel);


       // Access Homepage Button
       JButton accessHomepageButton = new JButton("Access the Rainforest Restoration Home Page");
       accessHomepageButton.setFont(new Font("Arial", Font.BOLD, 18));
       accessHomepageButton.setBounds(20, 530, 600, 50);
       accessHomepageButton.setBackground(new Color(0, 100, 0)); // Dark green background
       accessHomepageButton.setForeground(Color.WHITE); // White text colour
       accessHomepageButton.setFocusPainted(false);
       accessHomepageButton.setOpaque(true);
       accessHomepageButton.setBorderPainted(false);
       accessHomepageButton.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
               frame.dispose(); // Closing the current admin frame
               showNurseryPage(); // Showing the new nursery page
           }
       });
       adminPanel.add(accessHomepageButton);
           // Dead Plants Table
   JPanel deadPlantsPanel = new JPanel(new BorderLayout());
   deadPlantsPanel.setBounds(20, 590, 740, 200); // Adjusting position as needed
   deadPlantsPanel.setFont(new Font("Arial", Font.PLAIN, 16));


       DefaultTableModel deadPlantsModel = new DefaultTableModel(
   new String[]{"RecordID", "PlantSpecies", "TableNameID", "Quantity", "PlantStatus"}, 0
           );
       JTable deadPlantsTable = new JTable(deadPlantsModel);
           deadPlantsTable.setFont(new Font("Arial", Font.PLAIN, 14));
       deadPlantsTable.setRowHeight(24);


           JScrollPane deadPlantsScrollPane = new JScrollPane(deadPlantsTable);
           deadPlantsScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
           deadPlantsScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);


       TitledBorder deadPlantsBorder = BorderFactory.createTitledBorder(
   BorderFactory.createLineBorder(new Color(0, 100, 0)),
   "Dead Plants",
   TitledBorder.DEFAULT_JUSTIFICATION,
           TitledBorder.DEFAULT_POSITION,
           new Font("Arial", Font.BOLD, 14),
           Color.BLACK
       );
       deadPlantsScrollPane.setBorder(deadPlantsBorder);


       deadPlantsPanel.add(deadPlantsScrollPane, BorderLayout.CENTER);


// Required button to refresh dead plants data
JButton refreshDeadPlantsButton = new JButton("Retrieve Dead Plants");
refreshDeadPlantsButton.setBackground(new Color(100, 100, 0));
refreshDeadPlantsButton.setForeground(Color.BLACK);
refreshDeadPlantsButton.setFocusPainted(false);
refreshDeadPlantsButton.addActionListener(e -> refreshDeadPlantsData(deadPlantsModel));


JPanel deadPlantsButtonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
deadPlantsButtonPanel.add(refreshDeadPlantsButton);
deadPlantsPanel.add(deadPlantsButtonPanel, BorderLayout.SOUTH);


   adminPanel.add(deadPlantsPanel);


   refreshDeadPlantsData(deadPlantsModel);


   // Last Fertilised Table JPanel
   JPanel lastFertilisedPanel = new JPanel(new BorderLayout());
   lastFertilisedPanel.setBounds(20, 800, 740, 200); 
   lastFertilisedPanel.setFont(new Font("Arial", Font.PLAIN, 16));


   DefaultTableModel lastFertilisedModel = new DefaultTableModel(
       new String[]{"RecordID", "PlantSpecies", "TableNameID", "Quantity", "LastFertilised"}, 0
   );
   JTable lastFertilisedTable = new JTable(lastFertilisedModel);
   lastFertilisedTable.setFont(new Font("Arial", Font.PLAIN, 14));
   lastFertilisedTable.setRowHeight(24);


   JScrollPane lastFertilisedScrollPane = new JScrollPane(lastFertilisedTable);
   lastFertilisedScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
   lastFertilisedScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);


   TitledBorder lastFertilisedBorder = BorderFactory.createTitledBorder(
       BorderFactory.createLineBorder(new Color(0, 100, 0)),
       "Last Fertilised",
       TitledBorder.DEFAULT_JUSTIFICATION,
       TitledBorder.DEFAULT_POSITION,
       new Font("Arial", Font.BOLD, 14),
       Color.BLACK
   );
   lastFertilisedScrollPane.setBorder(lastFertilisedBorder);


   lastFertilisedPanel.add(lastFertilisedScrollPane, BorderLayout.CENTER);


   // Date selector for Last Fertilised
   JPanel dateSelectPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
   dateSelectPanel.setBackground(new Color(0, 100, 0)); // Dark green background
   JLabel dateLabel = new JLabel("Last Fertilised Before:");
   dateLabel.setForeground(Color.WHITE);
   dateLabel.setFont(new Font("Arial", Font.BOLD, 17)); 
   JDateChooser dateChooser = new JDateChooser();
   dateChooser.setPreferredSize(new Dimension(150, 30)); 
   dateChooser.setFont(new Font("Arial", Font.PLAIN, 14)); 
   dateChooser.setDate(new Date()); // Setting to current date by default
   dateChooser.getDateEditor().addPropertyChangeListener(e -> {
       if ("date".equals(e.getPropertyName())) {
           refreshLastFertilisedData(lastFertilisedModel, dateChooser.getDate());
       }
   });


   dateSelectPanel.add(dateLabel);
   dateSelectPanel.add(Box.createHorizontalStrut(10)); // Adding space between label and date chooser
   dateSelectPanel.add(dateChooser);


   lastFertilisedPanel.add(dateSelectPanel, BorderLayout.NORTH);


   adminPanel.add(lastFertilisedPanel);
   refreshLastFertilisedData(lastFertilisedModel, new Date());


   // Increasing frame height to accommodate the new table
       frame.setSize(800, 850);


       // Home Button
       JButton homeButton = new JButton("Home");
       homeButton.setFont(new Font("Arial", Font.BOLD, 18));
       homeButton.setBounds(630, 530, 130, 50);
       homeButton.setBackground(new Color(0, 100, 0)); 
       homeButton.setForeground(Color.WHITE); 
       homeButton.setFocusPainted(false);
       homeButton.setOpaque(true);
       homeButton.setBorderPainted(false);
       homeButton.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
               frame.dispose(); // Closing the current admin frame
               createGUI(); // Goes back to the original login homepage
           }
       });
       adminPanel.add(homeButton);


       // Adding toggle button for alphabetical order
       JButton toggleSortButton = createToggleSortButton();
       studentListPanel.add(toggleSortButton, BorderLayout.NORTH);


       // Adding the adminPanel to the mainPanel
       mainPanel.add(adminPanel);


       // Creating a JScrollPane and add the mainPanel to it
       JScrollPane scrollPane = new JScrollPane(mainPanel);
       scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
       scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);


       // Customising the scroll bar
       JScrollBar verticalBar = scrollPane.getVerticalScrollBar();
       verticalBar.setUnitIncrement(16); // Increasing the scroll speed
       verticalBar.setPreferredSize(new Dimension(12, Integer.MAX_VALUE)); // Making the scrollbar slightly wider


       verticalBar.setUI(new BasicScrollBarUI() {
           private final int THUMB_SIZE = 12;
           private final Color THUMB_COLOR = new Color(0, 100, 0); 
           private final Color TRACK_COLOR = new Color(240, 240, 240); 
          


           @Override
           protected void configureScrollBarColors() {
               this.thumbColor = THUMB_COLOR;
               this.trackColor = TRACK_COLOR;
             
           }


           @Override
           protected JButton createDecreaseButton(int orientation) {
               return createZeroButton();
           }


           @Override
           protected JButton createIncreaseButton(int orientation) {
               return createZeroButton();
           }


           private JButton createZeroButton() {
               JButton button = new JButton();
               button.setPreferredSize(new Dimension(0, 0));
               button.setMinimumSize(new Dimension(0, 0));
               button.setMaximumSize(new Dimension(0, 0));
               return button;
           }


           @Override
           protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
               if (thumbBounds.isEmpty() || !scrollbar.isEnabled()) {
                   return;
               }


               Graphics2D g2 = (Graphics2D) g.create();
               g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
              
               g2.setColor(thumbColor);
               g2.fillRoundRect(thumbBounds.x, thumbBounds.y, THUMB_SIZE, thumbBounds.height, THUMB_SIZE, THUMB_SIZE);
              
               g2.dispose();
           }


           @Override
           protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
               Graphics2D g2 = (Graphics2D) g.create();
               g2.setColor(trackColor);
               g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
               g2.dispose();
           }
       });


      
         


   // Creating a panel for species selection with dark green background
JPanel speciesSelectionPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
speciesSelectionPanel.setBackground(new Color(0, 100, 0)); // Dark green background


// Creating and style the label
JLabel speciesLabel = new JLabel("Select Plant Species:");
speciesLabel.setForeground(Color.WHITE); 
speciesLabel.setFont(new Font("Arial", Font.BOLD, 17)); 


// Creating and style the combo box
JComboBox<String> speciesComboBox = new JComboBox<>();
populateSpeciesComboBox(speciesComboBox);
speciesComboBox.setPreferredSize(new Dimension(200, 30)); 
speciesComboBox.setFont(new Font("Arial", Font.PLAIN, 14)); 


// Adding components to the panel
speciesSelectionPanel.add(speciesLabel);
speciesSelectionPanel.add(Box.createHorizontalStrut(10)); // Adding space between label and combo box
speciesSelectionPanel.add(speciesComboBox);


// Creating the species table
JTable speciesTable = new JTable() {
   @Override
   public boolean getScrollableTracksViewportWidth() {
       return getPreferredSize().width < getParent().getWidth();
   }
};
speciesTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
speciesTable.setFont(new Font("Arial", Font.PLAIN, 14));
speciesTable.setRowHeight(24);


JScrollPane speciesScrollPane = new JScrollPane(speciesTable);
speciesScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
speciesScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);


TitledBorder speciesBorder = BorderFactory.createTitledBorder(
   BorderFactory.createLineBorder(new Color(0, 100, 0)),
   "Selected Species Details",
   TitledBorder.DEFAULT_JUSTIFICATION,
   TitledBorder.DEFAULT_POSITION,
   new Font("Arial", Font.BOLD, 14),
   Color.BLACK
);
speciesScrollPane.setBorder(speciesBorder);


// Adding action listener to the combo box
speciesComboBox.addActionListener(e -> {
   String selectedSpecies = (String) speciesComboBox.getSelectedItem();
   updateSpeciesTable(speciesTable, selectedSpecies);
});


// Creating  a panel to hold both the selection panel and the table
JPanel speciesPanel = new JPanel(new BorderLayout());
speciesPanel.add(speciesSelectionPanel, BorderLayout.NORTH);
speciesPanel.add(speciesScrollPane, BorderLayout.CENTER);
speciesPanel.setBounds(20, 1010, 740, 250); 


// Adding the speciesPanel to the adminPanel
adminPanel.add(speciesPanel);


// Increasing the size of the adminPanel to accommodate the new components
adminPanel.setPreferredSize(new Dimension(780, 1270)); 


// Automatically selects the first item and update the table
if (speciesComboBox.getItemCount() > 0) {
   speciesComboBox.setSelectedIndex(0);
   updateSpeciesTable(speciesTable, (String) speciesComboBox.getSelectedItem());
}


// Increasing the size of the adminPanel to accommodate the new components
adminPanel.setPreferredSize(new Dimension(780, 1270)); 




       // Adding the scrollPane to the frame
       frame.getContentPane().add(scrollPane);


       frame.setSize(800, 650); 
       frame.setLocationRelativeTo(null);
       frame.setVisible(true);
   }
   private void refreshLastFertilisedData(DefaultTableModel model, Date selectedDate) {
       model.setRowCount(0); // Clearing existing data
       String SQL = "SELECT RecordID, PlantSpecies, TableNameID, Quantity, LastFertilised FROM PLANT_SPECIES_RECORD WHERE LastFertilised < ? ORDER BY LastFertilised DESC";
      
       try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
            PreparedStatement pstmt = conn.prepareStatement(SQL)) {
          
           pstmt.setTimestamp(1, new java.sql.Timestamp(selectedDate.getTime()));
          
           try (ResultSet rs = pstmt.executeQuery()) {
               while (rs.next()) {
                   model.addRow(new Object[]{
                       rs.getInt("RecordID"),
                       rs.getString("PlantSpecies"),
                       rs.getString("TableNameID"),
                       rs.getInt("Quantity"),
                       new java.sql.Date(rs.getTimestamp("LastFertilised").getTime()) // Converting to Date
                   });
               }
           }
          
           if (model.getRowCount() == 0) {
               JOptionPane.showMessageDialog(frame, "No plants found fertilised before the selected date.", "Information", JOptionPane.INFORMATION_MESSAGE);
           }
       } catch (SQLException ex) {
           ex.printStackTrace();
           JOptionPane.showMessageDialog(frame, "Error refreshing last fertilised data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
       }
   }
   private void showNurseryPage() {
   if (nurseryFrame != null) {
       nurseryFrame.dispose();
   }
   nurseryFrame = new JFrame("Tree Trackr. Rainforest Nursery");
   nurseryFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);


   JPanel nurseryPanel = new JPanel(new BorderLayout());
   nurseryPanel.setBackground(new Color(220, 240, 220)); 


  
  // Menu Bar
  JMenuBar menuBar = new JMenuBar();
  JMenu menu = new JMenu("Menu");
  menu.setForeground(Color.BLACK);
  menu.setBackground(new Color(0, 100, 0)); 
  menu.setOpaque(true);
  JMenu gridMenu = new JMenu("Grid Editors");
  JMenuItem loginMenuItem = new JMenuItem("Login Page");


  // Setting menu item colours
  Color darkGreen = new Color(0, 100, 0);
  for (JMenuItem item : new JMenuItem[]{menu, gridMenu, loginMenuItem}) {
      item.setForeground(Color.WHITE);
      item.setBackground(darkGreen);
      item.setOpaque(true);
  }


  // Adding grid editor menu items
  for (char row = 'A'; row <= 'F'; row++) {
      for (int col = 1; col <= 4; col++) {
          if ((row == 'C' || row == 'D') && col > 1) continue; // Skipping C2-C4 and D2-D4
          String gridLocation = row + "" + col;
          JMenuItem gridMenuItem = new JMenuItem(gridLocation);
          gridMenuItem.setForeground(Color.WHITE);
          gridMenuItem.setBackground(darkGreen);
          gridMenuItem.setOpaque(true);
          gridMenuItem.addActionListener(e -> openGridEditor(gridLocation));
          gridMenu.add(gridMenuItem);
      }
  }


  menu.add(gridMenu);
  menu.add(loginMenuItem);




   // Only adding the Admin Page menu item if the user is an administrator
   if (isAdministrator()) {
       JMenuItem adminMenuItem = new JMenuItem("Admin Page");
       adminMenuItem.setForeground(Color.WHITE);
       adminMenuItem.setBackground(darkGreen);
       adminMenuItem.setOpaque(true);
       adminMenuItem.addActionListener(e -> {
           nurseryFrame.dispose(); // Closing the nursery frame
           showAdminPage(); // Showing the admin page
       });
       menu.add(adminMenuItem);
   }


  
   menuBar.add(menu);
   menuBar.setBackground(darkGreen);
   menuBar.setOpaque(true);


   // Setting the menu icon to have a dark green background
   menu.setIcon(createMenuIcon(darkGreen));


   // Action listeners for menu items
   loginMenuItem.addActionListener(e -> {
       nurseryFrame.dispose();
       createGUI();
   });


   nurseryFrame.setJMenuBar(menuBar);


   // Menu and Home Buttons
   JButton menuButton = new JButton("Menu");
   JButton homeButton = new JButton("Login");
 
   // Setting button styles
   for (JButton button : new JButton[]{menuButton, homeButton}) {
       button.setBackground(darkGreen);
       button.setForeground(Color.WHITE);
       button.setFocusPainted(false);
       button.setOpaque(true);
       button.setBorderPainted(false);
   }


   homeButton.addActionListener(e -> {
       nurseryFrame.dispose();
       createGUI();
   });


   // Removing the login menu item for students
   if (!isAdministrator()) {
       menu.remove(loginMenuItem);
   }


   // Title and Subtitle
   JPanel titlePanel = new JPanel(new BorderLayout());
   titlePanel.setBackground(new Color(220, 240, 220));
   JLabel titleLabel = new JLabel("Tree Trackr. Rainforest Nursery", JLabel.CENTER);
   titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
   JLabel subtitleLabel = new JLabel("Your guide to navigate and track the Rainforest Nursery", JLabel.CENTER);
   subtitleLabel.setFont(new Font("Times New Roman", Font.ITALIC, 16));
   titlePanel.add(titleLabel, BorderLayout.NORTH);
   titlePanel.add(subtitleLabel, BorderLayout.CENTER);


   // Grid Panel for plant arrangement
   JPanel gridPanel = new JPanel(new GridBagLayout());
   gridPanel.setBackground(new Color(220, 240, 220));
   GridBagConstraints gbc = new GridBagConstraints();
   gbc.insets = new Insets(5, 5, 5, 5);
   Color[] colors = {Color.RED, Color.ORANGE, new Color(0, 0, 255), new Color(128, 0, 128)}; // Red, Orange, Medium Blue, Medium Purple


   ImageIcon eyeIcon = new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Eye Icon.png");
   ImageIcon scaledEyeIcon = new ImageIcon(eyeIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH));
   ImageIcon addIcon = new ImageIcon(new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Add.png").getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH));


   for (char row = 'A'; row <= 'F'; row++) {
       gbc.gridy = row - 'A';
       for (int col = 1; col <= 4; col++) {
           if ((row == 'C' || row == 'D') && col > 1) continue; // Skipping C2-C4 and D2-D4


           gbc.gridx = col - 1;
           JPanel cellPanel = new JPanel(new BorderLayout());
           cellPanel.setPreferredSize(new Dimension(150, 60)); 
           cellPanel.setBackground(colors[col-1]);
         
           String gridLocation = row + "" + col;
           JLabel label = new JLabel(gridLocation);
           label.setHorizontalAlignment(JLabel.CENTER);
           label.setForeground(Color.WHITE); 
           label.setFont(new Font("Arial", Font.BOLD, 16));
           cellPanel.add(label, BorderLayout.CENTER);
         
           JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
           buttonPanel.setOpaque(false);
         
           JButton viewButton = new JButton(scaledEyeIcon);
           viewButton.setPreferredSize(new Dimension(30, 30));
           viewButton.setBackground(darkGreen);
           viewButton.setOpaque(true);
           viewButton.setBorderPainted(false);
           setupViewButton(viewButton, label);
           buttonPanel.add(viewButton);
         
           JButton addButton = new JButton(addIcon);
           addButton.setPreferredSize(new Dimension(30, 30));
           addButton.setBackground(darkGreen);
           addButton.setOpaque(true);
           addButton.setBorderPainted(false);
           addButton.addActionListener(e -> showAddPlantDialogFromNurseryPage());
           buttonPanel.add(addButton);
         
           cellPanel.add(buttonPanel, BorderLayout.EAST);
           gridPanel.add(cellPanel, gbc);
       }
   }


   // Plant Species Data Table
   plantTableModel = createTableModel();
   JTable plantTable = new JTable(plantTableModel);
   plantTable.setFont(new Font("Arial", Font.PLAIN, 14));
   plantTable.setRowHeight(24);
   plantTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);


   int[] plantColumnWidths = {100, 150, 100, 120, 120, 120, 140, 100, 120, 140, 120, 100};
   for (int i = 0; i < Math.min(plantColumnWidths.length, plantTable.getColumnCount()); i++) {
       TableColumn column = plantTable.getColumnModel().getColumn(i);
       column.setPreferredWidth(plantColumnWidths[i]);
   }


   JScrollPane plantScrollPane = new JScrollPane(plantTable);
   plantScrollPane.setPreferredSize(new Dimension(450, 200));
   plantScrollPane.setBorder(BorderFactory.createTitledBorder(
       BorderFactory.createLineBorder(new Color(0, 100, 0)), 
       "All About the Rainforest Nursery",
       TitledBorder.DEFAULT_JUSTIFICATION,
       TitledBorder.DEFAULT_POSITION,
       new Font("Arial", Font.BOLD, 14),
       Color.BLACK 
   ));


   // Creating a panel to hold the table and refresh button
   JPanel plantDataPanel = new JPanel(new BorderLayout());
   plantDataPanel.add(plantScrollPane, BorderLayout.CENTER);


   // Creating the refresh button
   JButton refreshButton = new JButton("Refresh");
   refreshButton.setBackground(new Color(0, 100, 0)); 
   refreshButton.setForeground(Color.BLACK);
   refreshButton.setFocusPainted(false);
   refreshButton.addActionListener(e -> refreshPlantTable());


   // Adding the refresh button to a panel
   JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
   buttonPanel.setBackground(new Color(220, 240, 220));
   buttonPanel.add(refreshButton);


   // Adding the button panel to the plant data panel
   plantDataPanel.add(buttonPanel, BorderLayout.SOUTH);


   // Adding the plant data panel to the grid
   gbc.gridx = 1;
   gbc.gridy = 2;
   gbc.gridwidth = 3;
   gbc.gridheight = 2;
   gbc.fill = GridBagConstraints.BOTH;
   gridPanel.add(plantDataPanel, gbc);


   nurseryPanel.add(gridPanel, BorderLayout.CENTER);


   // Control Panel
   JPanel controlPanel = new JPanel(new BorderLayout());
   controlPanel.setBackground(new Color(220, 240, 220));
 
   buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 10, 5));
   buttonPanel.setBackground(new Color(220, 240, 220));
   buttonPanel.add(homeButton);
 
   controlPanel.add(buttonPanel, BorderLayout.EAST);
   controlPanel.add(titlePanel, BorderLayout.CENTER);
 
   nurseryPanel.add(controlPanel, BorderLayout.NORTH);


   // Instructions TextField
   JTextField instructionsField = new JTextField("Click on the eye icon to view further details and the green add button to add plants for each table.");
   instructionsField.setEditable(false);
   instructionsField.setBackground(new Color(0, 100, 0)); 
   instructionsField.setForeground(Color.WHITE); 
   nurseryPanel.add(instructionsField, BorderLayout.SOUTH);


   nurseryFrame.add(nurseryPanel);
   nurseryFrame.setSize(600, 400); 
   nurseryFrame.setLocationRelativeTo(null);
   nurseryFrame.setVisible(true);
}




private void refreshPlantTable() {
   plantTableModel.setRowCount(0); // Clearing the existing data
   DefaultTableModel newModel = createTableModel(); // Getting fresh data to populate the model
   for (int i = 0; i < newModel.getRowCount(); i++) {
       plantTableModel.addRow(newModel.getDataVector().elementAt(i));
   }
   plantTableModel.fireTableDataChanged(); // Notifying the table that data has changed


   // Setting custom colours for the JOptionPane
   UIManager.put("OptionPane.background", new Color(0, 100, 0)); 
   UIManager.put("Panel.background", new Color(0, 100, 0));
   UIManager.put("OptionPane.messageForeground", Color.WHITE); 


   // Showing the customised message dialog
   JOptionPane.showMessageDialog(
       nurseryFrame,
       "<html><font color='white'>Plant data refreshed successfully!</font></html>",
       "Refresh Complete",
       JOptionPane.INFORMATION_MESSAGE
   );


   // Resetting UI Manager defaults
   UIManager.put("OptionPane.background", null);
   UIManager.put("Panel.background", null);
   UIManager.put("OptionPane.messageForeground", null);
}


private void populateSpeciesComboBox(JComboBox<String> comboBox) {
   comboBox.removeAllItems(); // Clearing existing items
   try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT DISTINCT PlantSpecies FROM PLANT_SPECIES_RECORD")) {
      
       while (rs.next()) {
           comboBox.addItem(rs.getString("PlantSpecies"));
       }
   } catch (SQLException ex) {
       ex.printStackTrace();
       JOptionPane.showMessageDialog(null, "Error retrieving plant species: " + ex.getMessage());
   }
}


private void updateSpeciesTable(JTable table, String species) {
   String query = "SELECT * FROM PLANT_SPECIES_RECORD WHERE PlantSpecies = ?";
   try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
        PreparedStatement pstmt = conn.prepareStatement(query)) {
      
       pstmt.setString(1, species);
       ResultSet rs = pstmt.executeQuery();
      
       // Creating a new table model with the result set
       table.setModel(buildTableModel(rs));
      
       // Setting preferred column widths
       for (int i = 0; i < table.getColumnCount(); i++) {
           TableColumn column = table.getColumnModel().getColumn(i);
           switch (i) {
               case 0: column.setPreferredWidth(80); break;  // RecordID
               case 1: column.setPreferredWidth(100); break; // PlantSpecies
               case 2: column.setPreferredWidth(100); break; // TableNameID
               case 3: column.setPreferredWidth(80); break;  // Quantity
               case 4: column.setPreferredWidth(180); break; // SoilMoisture
               case 5: column.setPreferredWidth(120); break; // SunlightExposure
               case 6: column.setPreferredWidth(100); break; // PlantStatus
               case 7: column.setPreferredWidth(100); break; // PlantStage
               case 8: column.setPreferredWidth(100); break; // PlantType
               case 9: column.setPreferredWidth(120); break; // LastFertilised
               case 10: column.setPreferredWidth(100); break; // PlantHeight
               case 11: column.setPreferredWidth(100); break; // PlantWidth
               default: column.setPreferredWidth(100);
           }
       }
      
   } catch (SQLException ex) {
       ex.printStackTrace();
       JOptionPane.showMessageDialog(null, "Error retrieving plant data: " + ex.getMessage());
   }
}


// Helper method to create a TableModel from a ResultSet
public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
   ResultSetMetaData metaData = rs.getMetaData();
  
   // Getting column names
   Vector<String> columnNames = new Vector<>();
   int columnCount = metaData.getColumnCount();
   for (int column = 1; column <= columnCount; column++) {
       columnNames.add(metaData.getColumnName(column));
   }
  
   // Getting data rows with Vector objects
   Vector<Vector<Object>> data = new Vector<>();
   while (rs.next()) {
       Vector<Object> vector = new Vector<>();
       for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
           vector.add(rs.getObject(columnIndex));
       }
       data.add(vector);
   }
  
   return new DefaultTableModel(data, columnNames);
}




  private void openGridEditor(String gridLocation) {
      TableEditor editor;
      switch (gridLocation) {
          case "A1":
              editor = new A1TableEditor(this);
              break;
          case "A2":
              editor = new A2TableEditor(this);
              break;
          // Adding cases for other grid locations
          default:
              editor = new DefaultTableEditor(gridLocation, this);
      }
      JFrame editorFrame = new JFrame("TreeTrackr. Table " + gridLocation + " Editor");
      editorFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      editorFrame.add(editor);
      editorFrame.pack();
      editorFrame.setVisible(true);


  }


  private boolean isAdministrator() {
      // Implementing logic to check if the current user is an administrator
      return currentUserRole != null && currentUserRole.equals("Administrator");
  }


  private void deleteSelectedRecord() {
      int selectedRow = plantTable.getSelectedRow();
      if (selectedRow != -1) {
          int recordId = (int) plantTableModel.getValueAt(selectedRow, 0);


          // Defining the dark red color
          Color darkRed = new Color(139, 0, 0);  


          // Customising the JOptionPane
          UIManager.put("OptionPane.background", darkRed);
          UIManager.put("Panel.background", darkRed);
          UIManager.put("OptionPane.messageForeground", Color.WHITE);


          int confirm = JOptionPane.showConfirmDialog(frame,
              "<html><font color='white'>Are you sure you want to delete Record ID " + recordId + "?</font></html>",
              "Confirm Deletion", JOptionPane.YES_NO_OPTION);


          if (confirm == JOptionPane.YES_OPTION) {
              if (deleteRecordFromDatabase(recordId)) {
                  plantTableModel.removeRow(selectedRow);
                  JOptionPane.showMessageDialog(frame, "<html><font color='white'>Record deleted successfully.</font></html>");
              } else {
                  JOptionPane.showMessageDialog(frame, "<html><font color='white'>Error deleting record from database.</font></html>");
              }
          }


          // Resetting UI Manager defaults
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);
          UIManager.put("OptionPane.messageForeground", null);
      } else {
          // Defining the dark red color
          Color darkRed = new Color(139, 0, 0); 


          // Customising the JOptionPane
          UIManager.put("OptionPane.background", darkRed);
          UIManager.put("Panel.background", darkRed);
          UIManager.put("OptionPane.messageForeground", Color.WHITE);


          // Showing the warning message
          JOptionPane.showMessageDialog(
              frame,
              "<html><font color='white'>Please select a record to delete.</font></html>",
              "No Selection",
              JOptionPane.WARNING_MESSAGE
          );


          // Resetting UI Manager defaults
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);
          UIManager.put("OptionPane.messageForeground", null);
      }
  }


  private boolean deleteRecordFromDatabase(int recordId) {
      String SQL = "DELETE FROM PLANT_SPECIES_RECORD WHERE RecordID = ?";


      try (Connection dbConnect = DriverManager.getConnection(DB_URL, USER, PASS);
           PreparedStatement pstmt = dbConnect.prepareStatement(SQL)) {


          pstmt.setInt(1, recordId);
          int affectedRows = pstmt.executeUpdate();


          return affectedRows > 0;
      } catch (SQLException ex) {
          ex.printStackTrace();
          return false;
      }
  }


  abstract class TableEditor extends JPanel {
      protected String gridLocation;
      protected DefaultTableModel tableModel;
      protected JTable table;
      private RainforestRestorationLogin mainApp;


      public TableEditor(String gridLocation, RainforestRestorationLogin mainApp) {
          this.gridLocation = gridLocation;
          this.mainApp = mainApp;
          setLayout(new BorderLayout());
          initializeComponents();
      }


      protected void initializeComponents() {
          // Top panel for title, notes button, and logo
          JPanel topPanel = new JPanel(new BorderLayout());
          topPanel.setBackground(new Color(0, 100, 0)); 


          // Notes button and title panel
          JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
          leftPanel.setOpaque(false);


          JButton notesButton = createStyledButton("Notes", Color.WHITE, new Color(0, 100, 0));
          notesButton.setFont(new Font(notesButton.getFont().getName(), Font.BOLD, notesButton.getFont().getSize()));
          notesButton.addActionListener(e -> showNotesDialog());
          leftPanel.add(notesButton);


         
          JLabel titleLabel = new JLabel("TreeTrackr. Table " + gridLocation + " Editor");
          titleLabel.setForeground(Color.WHITE); 
          titleLabel.setFont(new Font("Arial", Font.PLAIN, 19)); // Increased font size, removed bold
          titleLabel.setBounds(20, 10, 600, 50); 
          leftPanel.add(titleLabel);


          // Logo icon image path
          ImageIcon logoIcon = new ImageIcon("/Users/XXXXX/Desktop/Rainforest Restoration/Rainforest Logo.png");
          Image logoImage = logoIcon.getImage().getScaledInstance(60, 40, Image.SCALE_SMOOTH);
          JLabel logoLabel = new JLabel(new ImageIcon(logoImage));
          logoLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 10));


          topPanel.add(leftPanel, BorderLayout.WEST);
          topPanel.add(logoLabel, BorderLayout.EAST);


          add(topPanel, BorderLayout.NORTH);
           // Table setup initialisation
          tableModel = createTableModel();
          table = new JTable(tableModel);
          table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
          // Setting preferred width for each column
          int[] columnWidths = {80, 150, 100, 100, 120, 120, 80, 100, 100, 100, 80, 80};
          for (int i = 0; i < Math.min(columnWidths.length, table.getColumnCount()); i++) {
              TableColumn column = table.getColumnModel().getColumn(i);
              column.setPreferredWidth(columnWidths[i]);
          }


          // Creating scroll pane with both scroll bars
          JScrollPane scrollPane = new JScrollPane(table);
          scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
          scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);


          add(scrollPane, BorderLayout.CENTER);


          JPanel actionButtonPanel = new JPanel();
          JButton addButton = createStyledButton("Add Plant");
          JButton editButton = createStyledButton("Edit Plant");
          JButton deleteButton = createStyledButton("Delete Plant");
          actionButtonPanel.add(addButton);
          actionButtonPanel.add(editButton);
          actionButtonPanel.add(deleteButton);
          add(actionButtonPanel, BorderLayout.SOUTH);


          addButton.addActionListener(e -> addPlant());
          editButton.addActionListener(e -> editPlant());
          deleteButton.addActionListener(e -> deleteSelectedRecord());
      }


      private JButton createStyledButton(String text) {
          JButton button = new JButton(text);
          button.setForeground(Color.WHITE);
          button.setBackground(new Color(0, 100, 0));
          button.setFocusPainted(false);
          button.setBorderPainted(false);
          button.setOpaque(true);
          return button;
      }


      private JButton createStyledButton(String text, Color bg, Color fg) {
          JButton button = new JButton(text);
          button.setForeground(fg);
          button.setBackground(bg);
          button.setFocusPainted(false);
          button.setBorderPainted(false);
          button.setOpaque(true);
          return button;
      }


      protected abstract DefaultTableModel createTableModel();




      protected void addPlant() {
          mainApp.showAddPlantDialogFromNurseryPage();
      }


      protected void editPlant() {
          int selectedRow = table.getSelectedRow();
          if (selectedRow == -1) {
              // Defining the dark red color
              Color darkRed = new Color(139, 0, 0);  


              // Customising the JOptionPane
              UIManager.put("OptionPane.background", darkRed);
              UIManager.put("Panel.background", darkRed);
              UIManager.put("OptionPane.messageForeground", Color.WHITE);


              // Showing the warning message
              JOptionPane.showMessageDialog(
                  null,
                  "<html><font color='white'>Please select a plant to edit.</font></html>",
                  "No Selection",
                  JOptionPane.WARNING_MESSAGE
              );


              // Resetting UI Manager defaults
              UIManager.put("OptionPane.background", null);
              UIManager.put("Panel.background", null);
              UIManager.put("OptionPane.messageForeground", null);
              return;
          }


          String[] columnNames = new String[table.getColumnCount()];
          Object[] values = new Object[table.getColumnCount()];


          for (int i = 0; i < table.getColumnCount(); i++) {
              columnNames[i] = table.getColumnName(i);
              values[i] = table.getValueAt(selectedRow, i);
          }


          showPlantEditDialog(columnNames, values);
      }


      protected void showPlantEditDialog(String[] columnNames, Object[] values) {
          JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Edit Plant", true);
          dialog.setLayout(new BorderLayout(10, 10));


          JPanel panel = new JPanel(new GridBagLayout());
          panel.setBackground(new Color(0, 100, 0)); 


          GridBagConstraints gbc = new GridBagConstraints();
          gbc.gridx = 0;
          gbc.gridy = 0;
          gbc.anchor = GridBagConstraints.WEST;
          gbc.insets = new Insets(5, 5, 5, 5);


          JTextField[] textFields = new JTextField[columnNames.length];


          for (int i = 0; i < columnNames.length; i++) {
              JLabel label = new JLabel(columnNames[i]);
              label.setForeground(Color.WHITE);
              panel.add(label, gbc);


              gbc.gridx = 1;
              textFields[i] = new JTextField(values[i].toString(), 20);
              panel.add(textFields[i], gbc);


              gbc.gridx = 0;
              gbc.gridy++;
          }


          JScrollPane scrollPane = new JScrollPane(panel);
          scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
          Color backgroundColor = new Color(220, 240, 220);
           scrollPane.getViewport().setBackground(backgroundColor);
          scrollPane.setBackground(backgroundColor);
          scrollPane.setPreferredSize(new Dimension(400, 300)); // Adjusting size as needed


          dialog.add(scrollPane, BorderLayout.CENTER);


          // Adding OK and Cancel buttons
          JPanel buttonPanel = new JPanel();
          buttonPanel.setBackground(new Color(0, 100, 0));
          JButton okButton = new JButton("OK");
          JButton cancelButton = new JButton("Cancel");
          buttonPanel.add(okButton);
          buttonPanel.add(cancelButton);
          dialog.add(buttonPanel, BorderLayout.SOUTH);


          okButton.addActionListener(e -> {
              if (updateDatabase(columnNames, textFields)) {
                  refreshTable();
                  dialog.dispose();
              }
          });


          cancelButton.addActionListener(e -> dialog.dispose());


          dialog.pack();
          dialog.setLocationRelativeTo(this);
          dialog.setVisible(true);
      }


      private boolean updateDatabase(String[] columnNames, JTextField[] textFields) {
          try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
              String updateQuery = "UPDATE PLANT_SPECIES_RECORD SET ";
              for (int i = 1; i < columnNames.length; i++) {
                  updateQuery += columnNames[i] + " = ?, ";
              }
              updateQuery = updateQuery.substring(0, updateQuery.length() - 2);
              updateQuery += " WHERE " + columnNames[0] + " = ?";


              try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {
                  for (int i = 1; i < textFields.length; i++) {
                      pstmt.setString(i, textFields[i].getText());
                  }
                  pstmt.setString(textFields.length, textFields[0].getText());
                  int rowsAffected = pstmt.executeUpdate();
                 
                  if (rowsAffected > 0) {
                      JOptionPane.showMessageDialog(this, "Record updated successfully", "Update Success", JOptionPane.INFORMATION_MESSAGE);
                      return true;
                  } else {
                      JOptionPane.showMessageDialog(this, "No records were updated. The specified record may not exist.", "Update Failed", JOptionPane.WARNING_MESSAGE);
                      return false;
                  }
              }
          } catch (SQLException ex) {
              ex.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error updating database: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
              return false;
          }
      }


      private void refreshTable() {
          Connection conn = null;
          try {
              conn = DriverManager.getConnection(DB_URL, USER, PASS);
             
              String query = buildQueryForTable(gridLocation);
              PreparedStatement pstmt = conn.prepareStatement(query);
             
              setQueryParameters(pstmt, gridLocation);
             
              ResultSet rs = pstmt.executeQuery();
             
              DefaultTableModel model = (DefaultTableModel) table.getModel();
              model.setRowCount(0); 
             
              ResultSetMetaData metaData = rs.getMetaData();
              int columnCount = metaData.getColumnCount();
             
              while (rs.next()) {
                  Object[] row = new Object[columnCount];
                  for (int i = 1; i <= columnCount; i++) {
                      row[i - 1] = rs.getObject(i);
                  }
                  model.addRow(row);
              }
             
              rs.close();
              pstmt.close();
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error refreshing table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
          } finally {
              if (conn != null) {
                  try {
                      conn.close();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              }
          }
      }


      private String buildQueryForTable(String tableName) {
          switch (tableName) {
              case "A1":
              case "A2":
              case "A3":
              case "A4":
                  return "SELECT * FROM PLANT_SPECIES_RECORD WHERE TableNameID LIKE ?";
              case "Plants":
                  return "SELECT * FROM PLANT_SPECIES_RECORD WHERE Location = ?";
              case "Users":
                  return "SELECT * FROM PLANT_SPECIES_RECORD WHERE Role != 'admin'";
              default:
                  return "SELECT * FROM PLANT_SPECIES_RECORD";
          }
      }


      private void setQueryParameters(PreparedStatement pstmt, String tableName) throws SQLException {
          switch (tableName) {
              case "A1":
              case "A2":
              case "A3":
              case "A4":
                  pstmt.setString(1, tableName + "%");
                  break;
              case "Plants":
                  pstmt.setString(1, getCurrentLocation()); // Implementing this method to get the current location
                  break;
              // No parameters needed for Users or default case
          }
      }


      private String getCurrentLocation() {
          // Implementing this method to return the current location (e.g., "A1" or "A2")
          return "A1"; // Placeholder implementation
      }


     


     


      protected void deletePlant() {
          int selectedRow = table.getSelectedRow();
          if (selectedRow != -1) {
              // Customising the confirmation dialog
              UIManager.put("OptionPane.background", new Color(139, 0, 0));
              UIManager.put("Panel.background", new Color(139, 0, 0));
              UIManager.put("OptionPane.messageForeground", Color.WHITE);
            
              int confirm = JOptionPane.showConfirmDialog(
                  this,
                  "<html><font color='white'>Are you sure you want to delete this plant?</font></html>",
                  "Confirm",
                  JOptionPane.YES_NO_OPTION,
                  JOptionPane.QUESTION_MESSAGE
              );
            
              // Resetting UI Manager defaults
              UIManager.put("OptionPane.background", null);
              UIManager.put("Panel.background", null);
              UIManager.put("OptionPane.messageForeground", null);
            
              if (confirm == JOptionPane.YES_OPTION) {
                  tableModel.removeRow(selectedRow);
              }
          } else {
              showWarningMessage("Please select a plant to delete.");
          }
      }


      private void showWarningMessage(String message) {
          UIManager.put("OptionPane.background", new Color(0, 100, 0));
          UIManager.put("Panel.background", new Color(0, 100, 0));
          UIManager.put("OptionPane.messageForeground", Color.WHITE);
        
          JOptionPane.showMessageDialog(
              this,
              "<html><font color='white'>" + message + "</font></html>",
              "Warning",
              JOptionPane.WARNING_MESSAGE
          );
        
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);
          UIManager.put("OptionPane.messageForeground", null);
      }


      protected void showNotesDialog() {
          String currentNotes = fetchNotesFromDatabase();
          JTextArea notesArea = new JTextArea(currentNotes, 10, 30);
          notesArea.setWrapStyleWord(true);
          notesArea.setLineWrap(true);
          notesArea.setBackground(Color.WHITE);
          notesArea.setForeground(Color.BLACK); 


          JScrollPane scrollPane = new JScrollPane(notesArea);
          scrollPane.setBorder(BorderFactory.createLineBorder(Color.WHITE)); 


          // Creating a panel with dark green background
          JPanel panel = new JPanel(new BorderLayout());
          panel.setBackground(new Color(0, 100, 0)); 
          panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
          panel.add(scrollPane, BorderLayout.CENTER);


          // Creating a label for the title with white text
          JLabel titleLabel = new JLabel("Notes for " + gridLocation);
          titleLabel.setForeground(Color.WHITE);
          titleLabel.setFont(new Font(titleLabel.getFont().getName(), Font.BOLD, 14));
          panel.add(titleLabel, BorderLayout.NORTH);


          // Customising the JOptionPane
          UIManager.put("OptionPane.background", new Color(0, 100, 0));
          UIManager.put("Panel.background", new Color(0, 100, 0));


          int result = JOptionPane.showConfirmDialog(this, panel,
              "Notes", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);


          // Resetting UIManager properties
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);


          if (result == JOptionPane.OK_OPTION) {
              updateNotesInDatabase(notesArea.getText());
          }
      }


      private String fetchNotesFromDatabase() {
          String notes = "";
          try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
               PreparedStatement pstmt = conn.prepareStatement(
                   "SELECT Notes FROM RAINFOREST_NURSERY_TABLE WHERE TableNameID = ?")) {
             
              pstmt.setString(1, gridLocation);
              try (ResultSet rs = pstmt.executeQuery()) {
                  if (rs.next()) {
                      notes = rs.getString("Notes");
                  }
              }
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error fetching notes: " + e.getMessage());
          }
          return notes;
      }


      private void updateNotesInDatabase(String newNotes) {
          try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
               PreparedStatement pstmt = conn.prepareStatement(
                   "UPDATE RAINFOREST_NURSERY_TABLE SET Notes = ? WHERE TableNameID = ?")) {
             
              pstmt.setString(1, newNotes);
              pstmt.setString(2, gridLocation);
              int affectedRows = pstmt.executeUpdate();
             
              if (affectedRows > 0) {
                  // Customising the JOptionPane
                  UIManager.put("OptionPane.background", new Color(0, 100, 0));
                  UIManager.put("Panel.background", new Color(0, 100, 0));
                  UIManager.put("OptionPane.messageForeground", Color.WHITE);


                  // Showing the success message
                  JOptionPane.showMessageDialog(
                      this,
                      "<html><font color='white'>Notes updated successfully!</font></html>",
                      "Update Complete",
                      JOptionPane.INFORMATION_MESSAGE
                  );


                  // Resetting UIManager properties
                  UIManager.put("OptionPane.background", null);
                  UIManager.put("Panel.background", null);
                  UIManager.put("OptionPane.messageForeground", null);
              } else {
                  JOptionPane.showMessageDialog(this, "No changes were made to the notes.");
              }
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error updating notes: " + e.getMessage());
          }
      }
  }




  // Inheritance implementation for Table Editor A1
  class A1TableEditor extends TableEditor {
      public A1TableEditor(RainforestRestorationLogin mainApp) {
          super("A1", mainApp);
      }




      @Override
      protected DefaultTableModel createTableModel() {
          DefaultTableModel model = new DefaultTableModel() {
              @Override
              public boolean isCellEditable(int row, int column) {
                  return false;
              }
          };


          try {
              String SQL = "SELECT * FROM PLANT_SPECIES_RECORD WHERE TableNameID = ?";
             
              try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
                   PreparedStatement pstmt = conn.prepareStatement(SQL)) {


                  pstmt.setString(1, gridLocation);


                  try (ResultSet rs = pstmt.executeQuery()) {
                      // Getting metadata
                      ResultSetMetaData metaData = rs.getMetaData();
                      int columnCount = metaData.getColumnCount();


                      // Adding column names to the model
                      for (int i = 1; i <= columnCount; i++) {
                          model.addColumn(metaData.getColumnName(i));
                      }


                      // Adding row data to the model
                      while (rs.next()) {
                          Object[] row = new Object[columnCount];
                          for (int i = 1; i <= columnCount; i++) {
                              row[i-1] = rs.getObject(i);
                          }
                          model.addRow(row);
                      }
                  }
              }
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(null, "Error retrieving plant data: " + e.getMessage());
          }


          return model;
      }
  }




  // Inheritance implementation for Table Editor A2
  class A2TableEditor extends TableEditor {
      public A2TableEditor(RainforestRestorationLogin mainApp) {
          super("A2", mainApp);
      }




      @Override
      protected DefaultTableModel createTableModel() {
          DefaultTableModel model = new DefaultTableModel() {
              @Override
              public boolean isCellEditable(int row, int column) {
                  return false;
              }
          };


          try {
              String SQL = "SELECT * FROM PLANT_SPECIES_RECORD WHERE TableNameID = ?";
              try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
                   PreparedStatement pstmt = conn.prepareStatement(SQL)) {


                  pstmt.setString(1, gridLocation); // Using gridLocation instead of Location


                  try (ResultSet rs = pstmt.executeQuery()) {
                      // Getting metadata
                      ResultSetMetaData metaData = rs.getMetaData();
                      int columnCount = metaData.getColumnCount();


                      // Adding column names to the model
                      for (int i = 1; i <= columnCount; i++) {
                          model.addColumn(metaData.getColumnName(i));
                      }


                      // Adding row data to the model
                      while (rs.next()) {
                          Object[] row = new Object[columnCount];
                          for (int i = 1; i <= columnCount; i++) {
                              row[i-1] = rs.getObject(i);
                          }
                          model.addRow(row);
                      }
                  }
              }
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(null, "Error retrieving plant data: " + e.getMessage());
          }


          return model;
      }
  }








  // Creation of Subsequent Table Editors using Inheritance




  class DefaultTableEditor extends TableEditor {
      public DefaultTableEditor(String gridLocation, RainforestRestorationLogin mainApp) {
          super(gridLocation, mainApp);
      }




      @Override
      protected DefaultTableModel createTableModel() {
          DefaultTableModel model = new DefaultTableModel();
          String tableName = "PLANT_SPECIES_RECORD";
          try (Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
               PreparedStatement preparedStatement = connection.prepareStatement(
                   "SELECT * FROM " + tableName + " WHERE TableNameID = ?");
          ) {
              preparedStatement.setString(1, gridLocation);
              try (ResultSet resultSet = preparedStatement.executeQuery()) {
                  ResultSetMetaData metaData = resultSet.getMetaData();
                  int columnCount = metaData.getColumnCount();


                  // Adding column names to the model
                  for (int i = 1; i <= columnCount; i++) {
                      model.addColumn(metaData.getColumnName(i));
                  }


                  // Adding row data to the model
                  while (resultSet.next()) {
                      Object[] row = new Object[columnCount];
                      for (int i = 1; i <= columnCount; i++) {
                          row[i - 1] = resultSet.getObject(i);
                      }
                      model.addRow(row);
                  }
              }
          } catch (SQLException e) {
              e.printStackTrace();
              JOptionPane.showMessageDialog(this, "Error creating table model: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
          }
          return model;
      }
  }








  private void setupViewButton(JButton viewButton, JLabel label) {
      viewButton.addActionListener(e -> {
          String gridLocation = label.getText();
          openGridEditor(gridLocation);
      });
  }








   private void deleteRecord(JTable table, DefaultTableModel model) {
      int selectedRow = table.getSelectedRow();
      if (selectedRow != -1) {
          // Defining the dark red color
          Color darkRed = new Color(139, 0, 0);  


          // Customizing the JOptionPane
          UIManager.put("OptionPane.background", darkRed);
          UIManager.put("Panel.background", darkRed);
          UIManager.put("OptionPane.messageForeground", Color.WHITE);
         
          int confirm = JOptionPane.showConfirmDialog(
              frame,
              "<html><font color='white'>Are you sure you want to delete this record?</font></html>",
              "Confirm Deletion",
              JOptionPane.YES_NO_OPTION,
              JOptionPane.QUESTION_MESSAGE
          );
         
          // Resetting UI Manager defaults
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);
          UIManager.put("OptionPane.messageForeground", null);
        
          if (confirm == JOptionPane.YES_OPTION) {
              model.removeRow(selectedRow);
          }
      } else {
          // Defining the dark red colour within the mnethod
          Color darkRed = new Color(139, 0, 0);  


          // Customising the JOptionPane
          UIManager.put("OptionPane.background", darkRed);
          UIManager.put("Panel.background", darkRed);
          UIManager.put("OptionPane.messageForeground", Color.WHITE);
         
          // Showing the warning message
          JOptionPane.showMessageDialog(
              frame,
              "<html><font color='white'>Please select a record to delete.</font></html>",
              "No Selection",
              JOptionPane.WARNING_MESSAGE
          );
         
          // Resetting UI Manager defaults
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);
          UIManager.put("OptionPane.messageForeground", null);
      }
  }








  private void showAddPlantDialogFromNurseryPage() {
      JPanel panel = new JPanel(new GridBagLayout());
      panel.setBackground(new Color(0, 100, 0));




      JTextField usernameIDField = new JTextField(10);
      JComboBox<String> tableNameIDField = new JComboBox<>(new String[]{"A1", "A2", "A3", "A4", "B1", "B2", "B3", "B4", "C1", "D1", "E1", "E2", "E3", "E4", "F1", "F2", "F3", "F4"});
      JTextField plantIndexField = new JTextField(10);
      plantSpeciesField = new JTextField(10);
      quantityField = new JTextField(10);
      soilMoistureField = new JComboBox<>(new String[]{"Low", "Medium", "High"});
      sunlightExposureField = new JComboBox<>(new String[]{"Full Sun", "Partial Shade", "Full Shade"});
      plantStatusField = new JComboBox<>(new String[]{"Excellent", "Good", "Fair", "Poor", "Dead"});
      plantStageField = new JComboBox<>(new String[]{"Sprout", "Seedling", "Vegetative", "Budding", "Flowering", "Ripening", "Senescence"});
      plantTypeField = new JComboBox<>(new String[]{"Ornamental Flower", "Fruit", "Leaf", "Stem", "Root"});
      lastFertilisedField = new JDateChooser();
      lastFertilisedField.setDate(new Date()); // Setting to current date
      plantWidthField = new JTextField(10);
      plantHeightField = new JTextField(10);




      // Setting background and foreground colours for components
      Color darkGreen = new Color(0, 100, 0);
      Color white = Color.WHITE;
      Color black = Color.BLACK;
      JComponent[] components = {usernameIDField, tableNameIDField, plantIndexField, plantSpeciesField, quantityField,
                                   soilMoistureField, sunlightExposureField, plantStatusField, plantStageField,
                                   plantTypeField, lastFertilisedField, plantWidthField, plantHeightField};
     
      for (JComponent comp : components) {
          comp.setBackground(white);
          comp.setForeground(black);
          if (comp instanceof JTextField) {
              ((JTextField) comp).setCaretColor(black);
          } else if (comp instanceof JComboBox) {
              ((JComboBox<?>) comp).setRenderer(new DefaultListCellRenderer() {
                  @Override
                  public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                      super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                      setBackground(white);
                      setForeground(black);
                      return this;
                  }
              });
          }
      }
      lastFertilisedField.setBackground(white);
      lastFertilisedField.setForeground(black);




      String[] labels = {"UsernameID:", "TableNameID:", "PlantIndex:", "PlantSpecies:", "Quantity:",
                         "SoilMoisture:", "SunlightExposure:", "PlantStatus:", "PlantStage:",
                         "PlantType:", "LastFertilised:", "PlantWidth:", "PlantHeight:"};
     
      GridBagConstraints gbc = new GridBagConstraints();
      gbc.insets = new Insets(2, 5, 2, 5); 
      gbc.fill = GridBagConstraints.HORIZONTAL;
      gbc.weightx = 1.0;
      gbc.gridwidth = GridBagConstraints.REMAINDER;
     
      for (int i = 0; i < labels.length; i++) {
          JLabel label = new JLabel(labels[i]);
          label.setForeground(white);
          panel.add(label, gbc);
          panel.add(components[i], gbc);
      }




      // Setting custom colours for the JOptionPane
      UIManager.put("OptionPane.background", darkGreen);
      UIManager.put("Panel.background", darkGreen);
      UIManager.put("OptionPane.messageForeground", white);




      int result = JOptionPane.showConfirmDialog(null, panel, "Add New Plant", JOptionPane.OK_CANCEL_OPTION);
     
      // Resetting UI Manager defaults
      UIManager.put("OptionPane.background", null);
      UIManager.put("Panel.background", null);
      UIManager.put("OptionPane.messageForeground", null);




      if (result == JOptionPane.OK_OPTION) {
          try {
              int newQuantity = Integer.parseInt(quantityField.getText());
              String newSoilMoisture = (String) soilMoistureField.getSelectedItem();
              String newSunlightExposure = (String) sunlightExposureField.getSelectedItem();
              String newPlantStatus = (String) plantStatusField.getSelectedItem();
              String newPlantStage = (String) plantStageField.getSelectedItem();
              String newPlantType = (String) plantTypeField.getSelectedItem();
              Date newLastFertilised = lastFertilisedField.getDate();
              float newPlantHeight = Float.parseFloat(plantHeightField.getText());
              float newPlantWidth = Float.parseFloat(plantWidthField.getText());
             
              addPlantToDatabase(
                  usernameIDField.getText(),
                  (String) tableNameIDField.getSelectedItem(),
                  plantIndexField.getText(),
                  plantSpeciesField.getText(),
                  newQuantity,
                  newSoilMoisture,
                  newSunlightExposure,
                  newPlantStatus,
                  newPlantStage,
                  newPlantType,
                  newLastFertilised,
                  newPlantWidth,
                  newPlantHeight
              );
          } catch (NumberFormatException e) {
              // Handling parsing errors
              JOptionPane.showMessageDialog(null, "Please enter valid numbers for quantity, height, and width.");
          } catch (NullPointerException e) {
              // Handling null values from combo boxes or date chooser
              JOptionPane.showMessageDialog(null, "Please ensure all fields are filled.");
          }
      }
  }




  private void addPlantToDatabase(String usernameID, String tableNameID, String plantIndex, String plantSpecies,
                                  int quantity, String soilMoisture, String sunlightExposure, String plantStatus,
                                  String plantStage, String plantType, Date lastFertilised, float plantWidth, float plantHeight) {
      try {
          String SQL = "INSERT INTO PLANT_SPECIES_RECORD (UsernameID, TableNameID, PlantIndex, PlantSpecies, Quantity, " +
                       "SoilMoisture, SunlightExposure, PlantStatus, PlantStage, PlantType, LastFertilised, PlantWidth, PlantHeight) " +
                       "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
          try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
               PreparedStatement pstmt = conn.prepareStatement(SQL, Statement.RETURN_GENERATED_KEYS)) {




              pstmt.setString(1, usernameID);
              pstmt.setString(2, tableNameID);
              pstmt.setString(3, plantIndex);
              pstmt.setString(4, plantSpecies);
              pstmt.setInt(5, quantity);
              pstmt.setString(6, soilMoisture);
              pstmt.setString(7, sunlightExposure);
              pstmt.setString(8, plantStatus);
              pstmt.setString(9, plantStage);
              pstmt.setString(10, plantType);
              pstmt.setTimestamp(11, lastFertilised != null ? new java.sql.Timestamp(lastFertilised.getTime()) : null);
              pstmt.setFloat(12, plantWidth);
              pstmt.setFloat(13, plantHeight);




              int affectedRows = pstmt.executeUpdate();




              if (affectedRows == 0) {
                  throw new SQLException("Creating plant record failed, no rows affected.");
              }




              try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                  if (generatedKeys.next()) {
                      int newRecordId = generatedKeys.getInt(1);
                     
                      // Customising the success dialog
                      UIManager.put("OptionPane.background", new Color(0, 100, 0));
                      UIManager.put("Panel.background", new Color(0, 100, 0));
                      UIManager.put("OptionPane.messageForeground", Color.WHITE);
                     
                      JOptionPane.showMessageDialog(
                          null,
                          "<html><font color='white'>Plant added successfully. Record ID: " + newRecordId + "</font></html>",
                          "Success",
                          JOptionPane.INFORMATION_MESSAGE
                      );
                     
                      // Resetting UI Manager defaults
                      UIManager.put("OptionPane.background", null);
                      UIManager.put("Panel.background", null);
                      UIManager.put("OptionPane.messageForeground", null);
                     
                      // Adding the new plant to the table model
                      plantTableModel.addRow(new Object[]{
                          newRecordId,
                          usernameID,
                          tableNameID,
                          plantIndex,
                          plantSpecies,
                          quantity,
                          soilMoisture,
                          sunlightExposure,
                          plantStatus,
                          plantStage,
                          plantType,
                          lastFertilised,
                          plantWidth,
                          plantHeight
                      });
                  } else {
                      throw new SQLException("Creating plant record failed, no ID obtained.");
                  }
              }
          }
      } catch (SQLException ex) {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(null, "Error adding plant to database: " + ex.getMessage());
      }
  }










 
  private Icon createMenuIcon(Color background) {
      return new Icon() {
          public void paintIcon(Component c, Graphics g, int x, int y) {
              g.setColor(background);
              g.fillRect(x, y, getIconWidth(), getIconHeight());
              g.setColor(Color.WHITE);
              g.fillRect(x + 3, y + 3, 10, 2);
              g.fillRect(x + 3, y + 7, 10, 2);
              g.fillRect(x + 3, y + 11, 10, 2);
          }
          public int getIconWidth() { return 16; }
          public int getIconHeight() { return 16; }
      };
  }








  private String[][] retrieveStudentData() {
      List<String[]> studentList = new ArrayList<>();
      try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
           Statement stmt = conn.createStatement();
           ResultSet rs = stmt.executeQuery("SELECT UsernameID, FirstName, LastName, Email FROM student")) {
         
          while (rs.next()) {
              studentList.add(new String[]{
                  rs.getString("UsernameID"),
                  rs.getString("FirstName"),
                  rs.getString("LastName"),
                  rs.getString("Email")
              });
          }
      } catch (SQLException e) {
          e.printStackTrace();
      }
      return studentList.toArray(new String[0][]);
  }




  private void showAddUserPanel() {
      JPanel panel = new JPanel(new GridBagLayout());
      panel.setBackground(new Color(0, 100, 0)); 


      JTextField usernameField = new JTextField(10);
      JTextField firstNameField = new JTextField(10);
      JTextField lastNameField = new JTextField(10);
      JTextField emailField = new JTextField(10);
      JPasswordField passwordField = new JPasswordField(10);


      GridBagConstraints gbc = new GridBagConstraints();
      gbc.insets = new Insets(2, 5, 2, 5);
      gbc.fill = GridBagConstraints.HORIZONTAL;
      gbc.weightx = 1.0;
      gbc.gridwidth = GridBagConstraints.REMAINDER;


      // Creating labels with white text
      JLabel[] labels = {
          new JLabel("Username:"),
          new JLabel("First Name:"),
          new JLabel("Last Name:"),
          new JLabel("Email:"),
          new JLabel("Password:")
      };


      // Setting white text for labels
      for (JLabel label : labels) {
          label.setForeground(Color.WHITE);
      }


      // Adding components to the panel
      panel.add(labels[0], gbc);
      panel.add(usernameField, gbc);
      panel.add(labels[1], gbc);
      panel.add(firstNameField, gbc);
      panel.add(labels[2], gbc);
      panel.add(lastNameField, gbc);
      panel.add(labels[3], gbc);
      panel.add(emailField, gbc);
      panel.add(labels[4], gbc);
      panel.add(passwordField, gbc);


      // Customising the JOptionPane
      UIManager.put("OptionPane.background", new Color(0, 100, 0));
      UIManager.put("Panel.background", new Color(0, 100, 0));
      UIManager.put("OptionPane.messageForeground", Color.WHITE);


      int result = JOptionPane.showConfirmDialog(null, panel, "Add New Student", JOptionPane.OK_CANCEL_OPTION);


      // Resetting UI Manager defaults
      UIManager.put("OptionPane.background", null);
      UIManager.put("Panel.background", null);
      UIManager.put("OptionPane.messageForeground", null);


      if (result == JOptionPane.OK_OPTION) {
          // Adding new student to the table and database
          String[] newStudent = {
              usernameField.getText(),
              firstNameField.getText(),
              lastNameField.getText(),
              emailField.getText()
          };
          studentTableModel.addRow(newStudent);
          // Inserting new student into the database
          try {
              Connection dbConnect = DriverManager.getConnection(DB_URL, USER, PASS);
              String SQL = "INSERT INTO student (UsernameID, FirstName, LastName, Email, Password) VALUES (?, ?, ?, ?, ?)";
              PreparedStatement pstmt = dbConnect.prepareStatement(SQL);
              pstmt.setString(1, usernameField.getText());
              pstmt.setString(2, firstNameField.getText());
              pstmt.setString(3, lastNameField.getText());
              pstmt.setString(4, emailField.getText());
              pstmt.setString(5, new String(passwordField.getPassword()));
              pstmt.executeUpdate();
              pstmt.close();
              dbConnect.close();
          } catch (SQLException ex) {
              ex.printStackTrace();
              JOptionPane.showMessageDialog(null, "Error inserting student into database: " + ex.getMessage());
          }
      }
  }








  private JButton createToggleSortButton() {
   JButton toggleButton = new JButton("Toggle Alphabetical Order");
  
   toggleButton.setForeground(new Color(0, 100, 0)); 
   toggleButton.setFont(toggleButton.getFont().deriveFont(Font.BOLD));
   toggleButton.setFocusPainted(false);
   toggleButton.setBorderPainted(true);
   toggleButton.addActionListener(e -> toggleAlphabeticalOrder());
   return toggleButton;
}




  private void toggleAlphabeticalOrder() {
      if (isAlphabeticalOrder) {
          restoreOriginalOrder();
      } else {
          saveOriginalOrder();
          bubbleSortStudentsByFirstName();
      }
      isAlphabeticalOrder = !isAlphabeticalOrder;
  }








  private void saveOriginalOrder() {
      originalOrder = new ArrayList<>();
      for (int i = 0; i < studentTableModel.getRowCount(); i++) {
          Object[] row = new Object[studentTableModel.getColumnCount()];
          for (int j = 0; j < studentTableModel.getColumnCount(); j++) {
              row[j] = studentTableModel.getValueAt(i, j);
          }
          originalOrder.add(row);
      }
  }




  private void restoreOriginalOrder() {
      studentTableModel.setRowCount(0);
      for (Object[] row : originalOrder) {
          studentTableModel.addRow(row);
      }
  }




//Alphabetical Bubble Sort Algorithm
  private void bubbleSortStudentsByFirstName() {
      int n = studentTableModel.getRowCount();
      for (int i = 0; i < n - 1; i++) {
          for (int j = 0; j < n - i - 1; j++) {
           // Assuming First Name is in column 1
              String name1 = (String) studentTableModel.getValueAt(j, 1);
              String name2 = (String) studentTableModel.getValueAt(j + 1, 1);
              if (name1.compareToIgnoreCase(name2) > 0) {   
                  swapRows(j, j + 1);
              }
          }
      }
      studentTableModel.fireTableDataChanged();
  }


  private void swapRows(int row1, int row2) {
      for (int col = 0; col < studentTableModel.getColumnCount(); col++) {
          Object temp = studentTableModel.getValueAt(row1, col);
          studentTableModel.setValueAt(studentTableModel.getValueAt(row2, col), row1, col);
          studentTableModel.setValueAt(temp, row2, col);
      }
  }








  class ButtonRenderer extends JButton implements TableCellRenderer {
      public ButtonRenderer() {
          setOpaque(true);
      }
     
      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
          setText((value == null) ? "" : value.toString());
          setBackground(new Color(0, 100, 0)); 
          setForeground(Color.BLACK);
          setBorderPainted(false);
          setContentAreaFilled(true);
          return this;
      }
  }


  class ButtonEditor extends DefaultCellEditor {
      protected JButton button;
      private boolean isPushed;




      public ButtonEditor(JCheckBox checkBox) {
          super(checkBox);
          button = new JButton();
          button.setOpaque(true);
          button.addActionListener(e -> fireEditingStopped());
      }




      public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
          button.setText("Sort");
          isPushed = true;
          return button;
      }




      public Object getCellEditorValue() {
          if (isPushed) {
              bubbleSortStudentsByFirstName();
          }
          isPushed = false;
          return "Sort";
      }




      public boolean stopCellEditing() {
          isPushed = false;
          return super.stopCellEditing();
      }
  }








  private JButton createEditStudentButton() {
      JButton editButton = new JButton("Update Student Details");
  
      editButton.addActionListener(e -> editSelectedStudent());
      return editButton;
  }




  private void editSelectedStudent() {
      int selectedRow = studentTable.getSelectedRow();
      if (selectedRow == -1) {
          // Defining the dark red colour
          Color darkRed = new Color(139, 0, 0); 


          // Customise the JOptionPane
          UIManager.put("OptionPane.background", darkRed);
          UIManager.put("Panel.background", darkRed);
          UIManager.put("OptionPane.messageForeground", Color.WHITE);


          // Showing the warning message
          JOptionPane.showMessageDialog(
              frame,
              "<html><font color='white'>Please select a student to edit.</font></html>",
              "No Selection",
              JOptionPane.WARNING_MESSAGE
          );


          // Resetting UI Manager defaults
          UIManager.put("OptionPane.background", null);
          UIManager.put("Panel.background", null);
          UIManager.put("OptionPane.messageForeground", null);
          return;
      }


      String usernameID = (String) studentTableModel.getValueAt(selectedRow, 0);
      String firstName = (String) studentTableModel.getValueAt(selectedRow, 1);
      String lastName = (String) studentTableModel.getValueAt(selectedRow, 2);
      String email = (String) studentTableModel.getValueAt(selectedRow, 3);




      JPanel panel = new JPanel(new BorderLayout());
      panel.setBackground(new Color(0, 100, 0));      
      JPanel labelPanel = new JPanel(new GridLayout(3, 1, 5, 5));
      labelPanel.setBackground(new Color(0, 100, 0));
      JPanel fieldPanel = new JPanel(new GridLayout(3, 1, 5, 5));
      fieldPanel.setBackground(new Color(0, 100, 0));




      JTextField firstNameField = new JTextField(firstName);
      JTextField lastNameField = new JTextField(lastName);
      JTextField emailField = new JTextField(email);




      String[] labelTexts = {"First Name:", "Last Name:", "Email:"};
      for (String text : labelTexts) {
          JLabel label = new JLabel(text);
          label.setForeground(Color.WHITE);
          labelPanel.add(label);
      }




      fieldPanel.add(firstNameField);
      fieldPanel.add(lastNameField);
      fieldPanel.add(emailField);




      panel.add(labelPanel, BorderLayout.WEST);
      panel.add(fieldPanel, BorderLayout.CENTER);




      UIManager.put("OptionPane.background", new Color(0, 100, 0));
      UIManager.put("Panel.background", new Color(0, 100, 0));
      UIManager.put("OptionPane.messageForeground", Color.WHITE);




      int result = JOptionPane.showConfirmDialog(null, panel, "Edit Student", JOptionPane.OK_CANCEL_OPTION);




      // Resetting UI Manager defaults
      UIManager.put("OptionPane.background", null);
      UIManager.put("Panel.background", null);
      UIManager.put("OptionPane.messageForeground", null);




      if (result == JOptionPane.OK_OPTION) {
          String newFirstName = firstNameField.getText();
          String newLastName = lastNameField.getText();
          String newEmail = emailField.getText();




          // Updating the table model
          studentTableModel.setValueAt(newFirstName, selectedRow, 1);
          studentTableModel.setValueAt(newLastName, selectedRow, 2);
          studentTableModel.setValueAt(newEmail, selectedRow, 3);




          // Updating the database
          updateStudentInDatabase(usernameID, newFirstName, newLastName, newEmail);
      }
  }




  private void updateStudentInDatabase(String usernameID, String firstName, String lastName, String email) {
      try {
          String dbURL = "jdbc:mysql://localhost:3306/rainforest?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";
          Connection dbConnect = DriverManager.getConnection(dbURL, "root", "0130742a");
          String SQL = "UPDATE student SET FirstName = ?, LastName = ?, Email = ? WHERE UsernameID = ?";
          PreparedStatement pstmt = dbConnect.prepareStatement(SQL);
          pstmt.setString(1, firstName);
          pstmt.setString(2, lastName);
          pstmt.setString(3, email);
          pstmt.setString(4, usernameID);
          pstmt.executeUpdate();
          pstmt.close();
          dbConnect.close();
          JOptionPane.showMessageDialog(frame, "Student information updated successfully.");
      } catch (SQLException ex) {
          ex.printStackTrace();
          JOptionPane.showMessageDialog(frame, "Error updating student in database: " + ex.getMessage());
      }
  }




  private DefaultTableModel createTableModel() {
      String[] columnNames = {"Record ID", "Plant Species", "Location", "Total Quantity", "Soil Moisture", "Sunlight Exposure", "Status", "Plant Stage", "Plant Type", "Last Fertilised", "Plant Height", "Plant Width"};
      DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
          @Override
          public boolean isCellEditable(int row, int column) {
              return false; // This will make the table non-editable
          }
      };




      try {
          String dbURL = "jdbc:mysql://localhost:3306/rainforest?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";
          String dbUser = "root";
          String dbPassword = "0130742a";
          String SQL = "SELECT * FROM PLANT_SPECIES_RECORD";
          try (Connection dbConnect = DriverManager.getConnection(dbURL, dbUser, dbPassword);
               Statement stmt = dbConnect.createStatement();
               ResultSet rs = stmt.executeQuery(SQL)) {




              while (rs.next()) {
                  Object[] row = {
                      rs.getInt("RecordID"),
                      rs.getString("PlantSpecies"),
                      rs.getString("TableNameID"),
                      rs.getInt("Quantity"),
                      rs.getString("SoilMoisture"),
                      rs.getString("SunlightExposure"),
                      rs.getString("PlantStatus"),
                      rs.getString("PlantStage"),
                      rs.getString("PlantType"),
                      rs.getDate("LastFertilised"),
                      rs.getFloat("PlantHeight"),
                      rs.getFloat("PlantWidth")
                  };
                  model.addRow(row);
              }
          }
      } catch (SQLException e) {
          e.printStackTrace();
          JOptionPane.showMessageDialog(null, "Error retrieving plant data: " + e.getMessage());
      }




      return model;
  }




  private JPanel createGraphPanel() {
      JPanel panel = new JPanel() {
          private String selectedSpecies = null;




          {
              addMouseListener(new MouseAdapter() {
                  @Override
                  public void mouseClicked(MouseEvent e) {
                      int x = e.getX();
                      int y = e.getY();
                      selectedSpecies = getClickedSpecies(x, y, getWidth());
                      repaint();
                  }
              });
          }




          @Override
          protected void paintComponent(Graphics g) {
              super.paintComponent(g);
              drawSimpleGraph((Graphics2D) g, selectedSpecies, getWidth());
          }
      };
      panel.setBackground(new Color(240, 255, 240));
      return panel;
  }




  private void drawSimpleGraph(Graphics2D g, String selectedSpecies, int width) {
      Map<String, PlantInfo> data = getPlantData();
      int maxValue = data.values().stream().mapToInt(PlantInfo::getQuantity).max().orElse(0);
      int height = 150;
      int yOffset = 10;


      g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);


      // Drawing axes
      g.setColor(Color.BLACK);
      g.setStroke(new BasicStroke(2));
      g.drawLine(40, 25 + yOffset, 40, height - 40 + yOffset);
      g.drawLine(40, height - 40 + yOffset, width - 10, height - 40 + yOffset);


      // Limiting to 13 bars maximum
      int maxBars = 13;
      List<Map.Entry<String, PlantInfo>> sortedData = new ArrayList<>(data.entrySet());
      sortedData.sort((e1, e2) -> e2.getValue().getQuantity().compareTo(e1.getValue().getQuantity()));
      sortedData = sortedData.subList(0, Math.min(maxBars, sortedData.size()));


      // Calculating bar width based on available space and number of bars
      int barWidth = Math.min(30, (width - 50) / sortedData.size());
      int x = 45;
      g.setFont(new Font("Arial", Font.PLAIN, 8));


      for (Map.Entry<String, PlantInfo> entry : sortedData) {
          int barHeight = (int) ((entry.getValue().getQuantity() * (height - 70)) / maxValue);
          g.setColor(new Color(34, 139, 34));
          g.fillRect(x, height - 40 - barHeight + yOffset, barWidth - 2, barHeight);
          g.setColor(Color.BLACK);
          g.drawRect(x, height - 40 - barHeight + yOffset, barWidth - 2, barHeight);
         
          // Drawing value on top of each bar
          g.drawString(String.valueOf(entry.getValue().getQuantity()), x + barWidth / 2 - 5, height - 45 - barHeight + yOffset);
         
          // Drawing "Click" caption in dark brown
          g.setFont(new Font("Arial", Font.ITALIC, 6));
          g.setColor(new Color(101, 67, 33));
          g.drawString("Click", x + barWidth / 2 - 8, height - 30 + yOffset);
         
          x += barWidth + 2;
      }


      // Drawing the title
      g.setColor(Color.BLACK);
      g.setFont(new Font("Arial", Font.BOLD, 12));
      g.drawString("A Snapshot of the Rainforest Nursery Records", width / 2 - 110, 25);


      // Drawing y-axis labels
      g.setFont(new Font("Arial", Font.BOLD, 8));
      for (int i = 0; i <= maxValue; i += maxValue / 4) {
          g.drawString(String.valueOf(i), 25, height - 40 - (i * (height - 70) / maxValue) + yOffset);
      }


      // Drawing selected species label
      if (selectedSpecies != null) {
          PlantInfo info = data.get(selectedSpecies);
          if (info != null) {
              g.setColor(new Color(6,64,43));
              g.setFont(new Font("Arial", Font.BOLD, 10));
              String label = selectedSpecies + " (ID: " + info.getRecordIDs() + ")";
              g.drawString(label, 45, height + yOffset-8);
          }
      }
  }




  private String getClickedSpecies(int mouseX, int mouseY, int width) {
      Map<String, PlantInfo> data = getPlantData();
      int maxBars = (width - 50) / 30;
      List<Map.Entry<String, PlantInfo>> sortedData = new ArrayList<>(data.entrySet());
      sortedData.sort((e1, e2) -> e2.getValue().getQuantity().compareTo(e1.getValue().getQuantity()));
      sortedData = sortedData.subList(0, Math.min(maxBars, sortedData.size()));




      int barWidth = Math.min(30, (width - 50) / sortedData.size());
      int x = 45;
      int height = 150;




      for (Map.Entry<String, PlantInfo> entry : sortedData) {
          if (mouseX >= x && mouseX < x + barWidth - 2 && mouseY >= height - 40) {
              return entry.getKey();
          }
          x += barWidth + 2;
      }
      return null;
  }




  private Map<String, PlantInfo> getPlantData() {
      Map<String, PlantInfo> data = new HashMap<>();
      try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
           Statement stmt = conn.createStatement();
           ResultSet rs = stmt.executeQuery("SELECT PlantSpecies, SUM(Quantity) as TotalQuantity, " +
                                            "GROUP_CONCAT(DISTINCT TableNameID) as Locations, " +
                                            "GROUP_CONCAT(DISTINCT RecordID) as RecordIDs " +
                                            "FROM PLANT_SPECIES_RECORD GROUP BY PlantSpecies")) {
          while (rs.next()) {
              String species = rs.getString("PlantSpecies");
              int quantity = rs.getInt("TotalQuantity");
              String locations = rs.getString("Locations");
              String recordIDs = rs.getString("RecordIDs");
              data.put(species, new PlantInfo(quantity, locations, recordIDs));
          }
      } catch (SQLException ex) {
          ex.printStackTrace();
      }
      return data;
  }




  private static class PlantInfo {
      private final Integer quantity;
      private final String recordIDs;
    




      public PlantInfo(Integer quantity, String locations, String recordIDs) {
          this.quantity = quantity;
         
          this.recordIDs = recordIDs;
      }




      public Integer getQuantity() { return quantity; }
     
      public String getRecordIDs() { return recordIDs; }
  }
 
  public static void main(String[] args) {




   // Using SwingUtilities to ensure that GUI-related code runs on the Event Dispatch Thread
   SwingUtilities.invokeLater(new Runnable() {
       @Override
       public void run() {
           // Initializing the GUI-related part of the application
           new RainforestRestorationLogin();
       }
   });






   try {
       // Loading the MySQL driver
       Class.forName("com.mysql.cj.jdbc.Driver");




       // Database URL and connection details
       String dbURL = "jdbc:mysql://localhost:3306/rainforest?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";
       String dbUser = "root";
       String dbPassword = "0130742a";




       try (Connection dbConnect = DriverManager.getConnection(dbURL, dbUser, dbPassword);
            Statement sqlSt = dbConnect.createStatement()) {




           // Executing the query for plant species records
           String SQL = "SELECT * FROM PLANT_SPECIES_RECORD";
           try (ResultSet result = sqlSt.executeQuery(SQL)) {
               // Looping through the result set and print out each row
               while(result.next()) {
                   String output = result.getString("PlantIndex") + " " +
                                   result.getString("PlantSpecies") + " " +
                                   result.getString("TableNameID") + " " +
                                   result.getString("Quantity") + " " +
                                   result.getString("SoilMoisture") + " " +
                                   result.getString("SunlightExposure") + " " +
                                   result.getString("PlantStatus") + " " +
                                   result.getString("PlantStage") + " " +
                                   result.getString("PlantType") + " " +
                                   result.getString("LastFertilised") + " " +
                                   result.getString("PlantHeight") + " " +
                                   result.getString("PlantWidth");
                   System.out.println(output);
               }
           }
       }
   } catch (ClassNotFoundException ex) {
       // Handling if the JDBC driver is not found
       Logger.getLogger(RainforestRestorationLogin.class.getName()).log(Level.SEVERE, null, ex);
   } catch (SQLException ex) {
       // Handling SQL-related errors
       Logger.getLogger(RainforestRestorationLogin.class.getName()).log(Level.SEVERE, null, ex);
   }
}
   }








